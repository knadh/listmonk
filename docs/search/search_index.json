{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>listmonk is a self-hosted, high performance one-way mailing list and newsletter manager. It comes as a standalone binary and the only dependency is a Postgres database.</p> <p></p>"},{"location":"#developers","title":"Developers","text":"<p>listmonk is a free and open source software licensed under AGPLv3. If you are interested in contributing, check out the GitHub repository and refer to the developer setup. The backend is written in Go and the frontend is Vue with Buefy for UI. </p>"},{"location":"archives/","title":"Archives","text":"<p>A global public archive is maintained on the public web interface. It can be enabled under Settings -&gt; Settings -&gt; General -&gt; Enable public mailing list archive.</p> <p>To make a campaign available in the public archive (provided it has been enabled in the settings as described above), enable the option 'Publish to public archive' under Campaigns -&gt; Create new -&gt; Archive.</p> <p>When using template variables that depend on subscriber data (such as any template variable referencing <code>.Subscriber</code>), such data must be supplied as 'Campaign metadata', which is a JSON object that will be used in place of <code>.Subscriber</code> when rendering the archive template and content.</p> <p>When individual subscriber tracking is enabled, TrackLink requires that a UUID of an existing user is provided as part of the campaign metadata. Any clicks on a TrackLink from the archived campaign will be counted towards that subscriber.</p> <p>As an example:</p> <pre><code>{\n  \"UUID\": \"5a837423-a186-5623-9a87-82691cbe3631\",\n  \"email\": \"example@example.com\",\n  \"name\": \"Reader\",\n  \"attribs\": {}\n}\n</code></pre> <p></p>"},{"location":"bounces/","title":"Bounce processing","text":"<p>Enable bounce processing in Settings -&gt; Bounces. POP3 bounce scanning and APIs only become available once the setting is enabled.</p>"},{"location":"bounces/#pop3-bounce-mailbox","title":"POP3 bounce mailbox","text":"<p>Configure the bounce mailbox in Settings -&gt; Bounces. Either the \"From\" e-mail that is set on a campaign (or in settings) should have a POP3 mailbox behind it to receive bounce e-mails, or you should configure a dedicated POP3 mailbox and add that address as the <code>Return-Path</code> (envelope sender) header in Settings -&gt; SMTP -&gt; Custom headers box. For example:</p> <pre><code>[\n    {\"Return-Path\": \"your-bounce-inbox@site.com\"}\n]\n</code></pre> <p>Some mail servers may also return the bounce to the <code>Reply-To</code> address, which can also be added to the header settings.</p>"},{"location":"bounces/#webhook-api","title":"Webhook API","text":"<p>The bounce webhook API can be used to record bounce events with custom scripting. This could be by reading a mailbox, a database, or mail server logs.</p> Method Endpoint Description <code>POST</code> /webhooks/bounce Record a bounce event. Name Type Required Description subscriber_uuid string The UUID of the subscriber. Either this or <code>email</code> is required. email string The e-mail of the subscriber. Either this or <code>subscriber_uuid</code> is required. campaign_uuid string UUID of the campaign for which the bounce happened. source string Yes A string indicating the source, eg: <code>api</code>, <code>my_script</code> etc. type string Yes <code>hard</code> or <code>soft</code> bounce. Currently, this has no effect on how the bounce is treated. meta string An optional escaped JSON string with arbitrary metadata about the bounce event. <pre><code>curl -u 'api_username:access_token' -X POST 'http://localhost:9000/webhooks/bounce' \\\n    -H \"Content-Type: application/json\" \\\n    --data '{\"email\": \"user1@mail.com\", \"campaign_uuid\": \"9f86b50d-5711-41c8-ab03-bc91c43d711b\", \"source\": \"api\", \"type\": \"hard\", \"meta\": \"{\\\"additional\\\": \\\"info\\\"}}'\n</code></pre>"},{"location":"bounces/#external-webhooks","title":"External webhooks","text":"<p>listmonk supports receiving bounce webhook events from the following SMTP providers.</p> Endpoint Description More info <code>https://listmonk.yoursite.com/webhooks/service/ses</code> Amazon (AWS) SES See below <code>https://listmonk.yoursite.com/webhooks/service/sendgrid</code> Sendgrid / Twilio Signed event webhook More info <code>https://listmonk.yoursite.com/webhooks/service/postmark</code> Postmark webhook More info <code>https://listmonk.yoursite.com/webhooks/service/forwardemail</code> Forward Email webhook More info"},{"location":"bounces/#amazon-simple-email-service-ses","title":"Amazon Simple Email Service (SES)","text":"<p>If using SES as your SMTP provider, automatic bounce processing is the recommended way to maintain your sender reputation. The settings below are based on Amazon's recommendations. Please note that your sending domain must be verified in SES before proceeding.</p> <ol> <li>In listmonk settings, go to the \"Bounces\" tab and configure the following:<ul> <li>Enable bounce processing: <code>Enabled</code><ul> <li>Soft:<ul> <li>Bounce count: <code>2</code></li> <li>Action: <code>None</code></li> </ul> </li> <li>Hard:<ul> <li>Bounce count: <code>1</code></li> <li>Action: <code>Blocklist</code></li> </ul> </li> <li>Complaint: <ul> <li>Bounce count: <code>1</code></li> <li>Action: <code>Blocklist</code></li> </ul> </li> </ul> </li> <li>Enable bounce webhooks: <code>Enabled</code></li> <li>Enable SES: <code>Enabled</code></li> </ul> </li> <li>In the AWS console, go to Simple Notification Service and create a new topic with the following settings:<ul> <li>Type: <code>Standard</code></li> <li>Name: <code>ses-bounces</code> (or any other name)</li> </ul> </li> <li>Create a new subscription to that topic with the following settings:<ul> <li>Protocol: <code>HTTPS</code></li> <li>Endpoint: <code>https://listmonk.yoursite.com/webhooks/service/ses</code></li> <li>Enable raw message delivery: <code>Disabled</code> (unchecked)</li> </ul> </li> <li>SES will then make a request to your listmonk instance to confirm the subscription. After a page refresh, the subscription should have a status of \"Confirmed\". If not, your endpoint may be incorrect or not publicly accessible.</li> <li>In the AWS console, go to Simple Email Service and click \"Identities\" in the left sidebar.</li> <li>Click your domain and go to the \"Notifications\" tab.</li> <li>Next to \"Feedback notifications\", click \"Edit\".</li> <li>For both \"Bounce feedback\" and \"Complaint feedback\", use the following settings:<ul> <li>SNS topic: <code>ses-bounces</code> (or whatever you named it)</li> <li>Include original email headers: <code>Enabled</code> (checked)</li> </ul> </li> <li>Repeat steps 6-8 for any <code>Email address</code> identities you send from using listmonk</li> <li>Bounce processing should now be working. You can test it with SES simulator addresses. Add them as subscribers, send them campaign previews, and ensure that the appropriate action was taken after the configured bounce count was reached.<ul> <li>Soft bounce: <code>ooto@simulator.amazonses.com</code></li> <li>Hard bounce: <code>bounce@simulator.amazonses.com</code></li> <li>Complaint: <code>complaint@simulator.amazonses.com</code></li> </ul> </li> <li>You can optionally disable email feedback forwarding.</li> </ol>"},{"location":"bounces/#exporting-bounces","title":"Exporting bounces","text":"<p>Bounces can be exported via the JSON API: <pre><code>curl -u 'username:passsword' 'http://localhost:9000/api/bounces'\n</code></pre></p> <p>Or by querying the database directly: <pre><code>SELECT bounces.created_at,\n    bounces.subscriber_id,\n    subscribers.uuid AS subscriber_uuid,\n    subscribers.email AS email\nFROM bounces\nLEFT JOIN subscribers ON (subscribers.id = bounces.subscriber_id)\nORDER BY bounces.created_at DESC LIMIT 1000;\n</code></pre></p>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#subscriber","title":"Subscriber","text":"<p>A subscriber is a recipient identified by an e-mail address and name. Subscribers receive e-mails that are sent from listmonk. A subscriber can be added to any number of lists. Subscribers who are not a part of any lists are considered orphan records.</p>"},{"location":"concepts/#attributes","title":"Attributes","text":"<p>Attributes are arbitrary properties attached to a subscriber in addition to their e-mail and name. They are represented as a JSON map. It is not necessary for all subscribers to have the same attributes. Subscribers can be queried and segmented into lists based on their attributes, and the attributes can be inserted into the e-mails sent to them. For example:</p> <pre><code>{\n  \"city\": \"Bengaluru\",\n  \"likes_tea\": true,\n  \"spoken_languages\": [\"English\", \"Malayalam\"],\n  \"projects\": 3,\n  \"stack\": {\n    \"frameworks\": [\"echo\", \"go\"],\n    \"languages\": [\"go\", \"python\"],\n    \"preferred_language\": \"go\"\n  }\n}\n</code></pre>"},{"location":"concepts/#subscription-statuses","title":"Subscription statuses","text":"<p>A subscriber can be added to one or more lists, and each such relationship can have one of these statuses.</p> Status Description <code>unconfirmed</code> The subscriber was added to the list directly without their explicit confirmation. Nonetheless, the subscriber will receive campaign messages sent to single optin campaigns. <code>confirmed</code> The subscriber confirmed their subscription by clicking on 'accept' in the confirmation e-mail. Only confirmed subscribers in opt-in lists will receive campaign messages send to the list. <code>unsubscribed</code> The subscriber is unsubscribed from the list and will not receive any campaign messages sent to the list."},{"location":"concepts/#segmentation","title":"Segmentation","text":"<p>Segmentation is the process of filtering a large list of subscribers into a smaller group based on arbitrary conditions, primarily based on their attributes. For instance, if an e-mail needs to be sent subscribers who live in a particular city, given their city is described in their attributes, it's possible to quickly filter them out into a new list and e-mail them. Learn more.</p>"},{"location":"concepts/#list","title":"List","text":"<p>A list (or a mailing list) is a collection of subscribers grouped under a name, for instance, clients. Lists are used to organise subscribers and send e-mails to specific groups. A list can be single optin or double optin. Subscribers added to double optin lists have to explicitly accept the subscription by clicking on the confirmation e-mail they receive. Until then, they do not receive campaign messages.</p>"},{"location":"concepts/#campaign","title":"Campaign","text":"<p>A campaign is an e-mail (or any other kind of messages) that is sent to one or more lists.</p>"},{"location":"concepts/#transactional-message","title":"Transactional message","text":"<p>A transactional message is an arbitrary message sent to a subscriber using the transactional message API. For example a welcome e-mail on signing up to a service; an order confirmation e-mail on purchasing an item; a password reset e-mail when a user initiates an online account recovery process.</p>"},{"location":"concepts/#template","title":"Template","text":"<p>A template is a re-usable HTML design that can be used across campaigns and when sending arbitrary transactional messages. Most commonly, templates have standard header and footer areas with logos and branding elements, where campaign content is inserted in the middle. listmonk supports Go template expressions that lets you create powerful, dynamic HTML templates. Learn more.</p>"},{"location":"concepts/#messenger","title":"Messenger","text":"<p>listmonk supports multiple custom messaging backends in additional to the default SMTP e-mail backend, enabling not just e-mail campaigns, but arbitrary message campaigns such as SMS, FCM notifications etc. A Messenger is a web service that accepts a campaign message pushed to it as a JSON request, which the service can in turn broadcast as SMS, FCM etc. Learn more.</p>"},{"location":"concepts/#tracking-pixel","title":"Tracking pixel","text":"<p>The tracking pixel is a tiny, invisible image that is inserted into an e-mail body to track e-mail views. This allows measuring the read rate of e-mails. While this is exceedingly common in e-mail campaigns, it carries privacy implications and should be used in compliance with rules and regulations such as GDPR. It is possible to track reads anonymously without associating an e-mail read to a subscriber.</p>"},{"location":"concepts/#click-tracking","title":"Click tracking","text":"<p>It is possible to track the clicks on every link that is sent in an e-mail. This allows measuring the clickthrough rates of links in e-mails. While this is exceedingly common in e-mail campaigns, it carries privacy implications and should be used in compliance with rules and regulations such as GDPR. It is possible to track link clicks anonymously without associating an e-mail read to a subscriber.</p>"},{"location":"concepts/#bounce","title":"Bounce","text":"<p>A bounce occurs when an e-mail that is sent to a recipient \"bounces\" back for one of many reasons including the recipient address being invalid, their mailbox being full, or the recipient's e-mail service provider marking the e-mail as spam. listmonk can automatically process such bounce e-mails that land in a configured POP mailbox, or via APIs of SMTP e-mail providers such as AWS SES and Sengrid. Based on settings, subscribers returning bounced e-mails can either be blocklisted or deleted automatically. Learn more.</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#toml-configuration-file","title":"TOML Configuration file","text":"<p>One or more TOML files can be read by passing <code>--config config.toml</code> multiple times. Apart from a few low level configuration variables and the database configuration, all other settings can be managed from the <code>Settings</code> dashboard on the admin UI.</p> <p>To generate a new sample configuration file, run <code>listmonk --new-config</code></p>"},{"location":"configuration/#environment-variables","title":"Environment variables","text":"<p>Variables in config.toml can also be provided as environment variables prefixed by <code>LISTMONK_</code> with periods replaced by <code>__</code> (double underscore). To start listmonk purely with environment variables without a configuration file, set the environment variables and pass the config flag as <code>--config=\"\"</code>.</p> <p>Example:</p> Environment variable Example value <code>LISTMONK_app__address</code> \"0.0.0.0:9000\" <code>LISTMONK_db__host</code> db <code>LISTMONK_db__port</code> 9432 <code>LISTMONK_db__user</code> listmonk <code>LISTMONK_db__password</code> listmonk <code>LISTMONK_db__database</code> listmonk <code>LISTMONK_db__ssl_mode</code> disable"},{"location":"configuration/#customizing-system-templates","title":"Customizing system templates","text":"<p>See system templates.</p>"},{"location":"configuration/#http-routes","title":"HTTP routes","text":"<p>When configuring auth proxies and web application firewalls, use this table.</p>"},{"location":"configuration/#private-admin-endpoints","title":"Private admin endpoints.","text":"Methods Route Description <code>*</code> <code>/api/*</code> Admin APIs <code>GET</code> <code>/admin/*</code> Admin UI and HTML pages <code>POST</code> <code>/webhooks/bounce</code> Admin bounce webhook"},{"location":"configuration/#public-endpoints-to-expose-to-the-internet","title":"Public endpoints to expose to the internet.","text":"Methods Route Description <code>GET, POST</code> <code>/subscription/*</code> HTML subscription pages <code>GET,</code> <code>/link/*</code> Tracked link redirection <code>GET</code> <code>/campaign/*</code> Pixel tracking image <code>GET</code> <code>/public/*</code> Static files for HTML subscription pages <code>POST</code> <code>/webhooks/service/*</code> Bounce webhook endpoints for AWS and Sendgrid <code>GET</code> <code>/uploads/*</code> The file upload path configured in media settings"},{"location":"configuration/#media-uploads","title":"Media uploads","text":""},{"location":"configuration/#using-filesystem","title":"Using filesystem","text":"<p>When configuring <code>docker</code> volume mounts for using filesystem media uploads, you can follow either of two approaches. The second option may be necessary if your setup requires you to use <code>sudo</code> for docker commands. </p> <p>After making any changes you will need to run <code>sudo docker compose stop ; sudo docker compose up</code>. </p> <p>And under <code>https://listmonk.mysite.com/admin/settings</code> you put <code>/listmonk/uploads</code>. </p>"},{"location":"configuration/#using-volumes","title":"Using volumes","text":"<p>Using <code>docker volumes</code>, you can specify the name of volume and destination for the files to be uploaded inside the container.</p> <pre><code>app:\n    volumes:\n      - type: volume\n        source: listmonk-uploads\n        target: /listmonk/uploads\n\nvolumes:\n  listmonk-uploads:\n</code></pre> <p>Note</p> <p>This volume is managed by <code>docker</code> itself, and you can see find the host path with <code>docker volume inspect listmonk_listmonk-uploads</code>.</p>"},{"location":"configuration/#using-bind-mounts","title":"Using bind mounts","text":"<p><pre><code>  app:\n    volumes:\n      - ./path/on/your/host/:/path/inside/container\n</code></pre> Eg: <pre><code>  app:\n    volumes:\n      - ./data/uploads:/listmonk/uploads\n</code></pre> The files will be available inside <code>/data/uploads</code> directory on the host machine.</p> <p>To use the default <code>uploads</code> folder: <pre><code>  app:\n    volumes:\n      - ./uploads:/listmonk/uploads\n</code></pre></p>"},{"location":"configuration/#logs","title":"Logs","text":""},{"location":"configuration/#docker","title":"Docker","text":"<p>https://docs.docker.com/engine/reference/commandline/logs/ <pre><code>sudo docker logs -f\nsudo docker logs listmonk_app -t\nsudo docker logs listmonk_db -t\nsudo docker logs --help\n</code></pre> Container info: <code>sudo docker inspect listmonk_listmonk</code></p> <p>Docker logs to <code>/dev/stdout</code> and <code>/dev/stderr</code>. The logs are collected by the docker daemon and stored in your node's host path (by default). The same can be configured (/etc/docker/daemon.json) in your docker daemon settings to setup other logging drivers, logrotate policy and more, which you can read about here.</p>"},{"location":"configuration/#binary","title":"Binary","text":"<p>listmonk logs to <code>stdout</code>, which is usually not saved to any file. To save listmonk logs to a file use <code>./listmonk &gt; listmonk.log</code>.</p> <p>Settings -&gt; Logs in admin shows the last 1000 lines of the standard log output but gets erased when listmonk is restarted.</p> <p>For the service file, you can use <code>ExecStart=/bin/bash -ce \"exec /usr/bin/listmonk --config /etc/listmonk/config.toml --static-dir /etc/listmonk/static &gt;&gt;/etc/listmonk/listmonk.log 2&gt;&amp;1\"</code> to create a log file that persists after restarts. More info.</p>"},{"location":"configuration/#time-zone","title":"Time zone","text":"<p>To change listmonk's time zone (logs, etc.) edit <code>docker-compose.yml</code>: <pre><code>environment:\n    - TZ=Etc/UTC\n</code></pre> with any Timezone listed here. Then run <code>sudo docker-compose stop ; sudo docker-compose up</code> after making changes.</p>"},{"location":"configuration/#smtp","title":"SMTP","text":""},{"location":"configuration/#retries","title":"Retries","text":"<p>The <code>Settings -&gt; SMTP -&gt; Retries</code> denotes the number of times a message that fails at the moment of sending is retried silently using different connections from the SMTP pool. The messages that fail even after retries are the ones that are logged as errors and ignored.</p>"},{"location":"configuration/#smtp-ports","title":"SMTP ports","text":"<p>Some server hosts block outgoing SMTP ports (25, 465). You may have to contact your host to unblock them before being able to send e-mails. Eg: Hetzner.</p>"},{"location":"configuration/#performance","title":"Performance","text":""},{"location":"configuration/#batch-size","title":"Batch size","text":"<p>The batch size parameter is useful when working with very large lists with millions of subscribers for maximising throughput. It is the number of subscribers that are fetched from the database sequentially in a single cycle (~5 seconds) when a campaign is running. Increasing the batch size uses more memory, but reduces the round trip to the database.</p>"},{"location":"developer-setup/","title":"Developer setup","text":"<p>The app has two distinct components, the Go backend and the VueJS frontend. In the dev environment, both are run independently.</p>"},{"location":"developer-setup/#pre-requisites","title":"Pre-requisites","text":"<ul> <li><code>go</code></li> <li><code>nodejs</code> (if you are working on the frontend) and <code>yarn</code></li> <li>Postgres database. If there is no local installation, the demo docker DB can be used for development (<code>docker compose up demo-db</code>)</li> </ul>"},{"location":"developer-setup/#first-time-setup","title":"First time setup","text":"<p><code>git clone https://github.com/knadh/listmonk.git</code>. The project uses go.mod, so it's best to clone it outside the Go src path.</p> <ol> <li>Copy <code>config.toml.sample</code> as <code>config.toml</code> and add your config.</li> <li><code>make dist</code> to build the listmonk binary. Once the binary is built, run <code>./listmonk --install</code> to run the DB setup. For subsequent dev runs, use <code>make run</code>.</li> </ol> <p>mailhog is an excellent standalone mock SMTP server (with a UI) for testing and dev.</p>"},{"location":"developer-setup/#running-the-dev-environment","title":"Running the dev environment","text":"<p>You can run your dev environment locally or inside containers.</p> <p>After setting up the dev environment, you can visit <code>http://localhost:8080</code>.</p> <ol> <li>Locally</li> <li>Run <code>make run</code> to start the listmonk dev server on <code>:9000</code>.</li> <li> <p>Run <code>make run-frontend</code> to start the Vue frontend in dev mode using yarn on <code>:8080</code>. All <code>/api/*</code> calls are proxied to the app running on <code>:9000</code>. Refer to the frontend README for an overview on how the frontend is structured.</p> </li> <li> <p>Inside containers (Using Makefile)</p> </li> <li>Run <code>make init-dev-docker</code> to setup container for db.</li> <li>Run <code>make dev-docker</code> to setup docker container suite.</li> <li> <p>Run <code>make rm-dev-docker</code> to clean up docker container suite.</p> </li> <li> <p>Inside containers (Using devcontainer)</p> </li> <li>Open repo in vscode, open command palette, and select \"Dev Containers: Rebuild and Reopen in Container\".</li> </ol> <p>It will set up db, and start frontend/backend for you.</p>"},{"location":"developer-setup/#production-build","title":"Production build","text":"<p>Run <code>make dist</code> to build the Go binary, build the Javascript frontend, and embed the static assets producing a single self-contained binary, <code>listmonk</code></p>"},{"location":"external-integration/","title":"Integrating with external systems","text":"<p>In many environments, a mailing list manager's subscriber database is not run independently but as a part of an existing customer database or a CRM. There are multiple ways of keeping listmonk in sync with external systems.</p>"},{"location":"external-integration/#using-apis","title":"Using APIs","text":"<p>The subscriber APIs offers several APIs to manipulate the subscribers database, like addition, updation, and deletion. For bulk synchronisation, a CSV can be generated (and optionally zipped) and posted to the import API.</p>"},{"location":"external-integration/#interacting-directly-with-the-db","title":"Interacting directly with the DB","text":"<p>listmonk uses tables with simple schemas to represent subscribers (<code>subscribers</code>), lists (<code>lists</code>), and subscriptions (<code>subscriber_lists</code>). It is easy to add, update, and delete subscriber information directly with the database tables for advanced usecases. See the table schemas for more information.</p>"},{"location":"i18n/","title":"Internationalization (i18n)","text":"<p>listmonk comes available in multiple languages thanks to language packs contributed by volunteers. A language pack is a JSON file with a map of keys and corresponding translations. The bundled languages can be viewed here.</p>"},{"location":"i18n/#additional-language-packs","title":"Additional language packs","text":"<p>These additional language packs can be downloaded and passed to listmonk with the <code>--i18n-dir</code> flag as described in the next section.</p> Language Description Deutsch (formal) German language with formal pronouns"},{"location":"i18n/#customizing-languages","title":"Customizing languages","text":"<p>To customize an existing language or to load a new language, put one or more <code>.json</code> language files in a directory, and pass the directory path to listmonk with the<code>--i18n-dir=/path/to/dir</code> flag.</p>"},{"location":"i18n/#contributing-a-new-language","title":"Contributing a new language","text":""},{"location":"i18n/#using-the-basic-editor","title":"Using the basic editor","text":"<ul> <li>Visit https://listmonk.app/i18n</li> <li>Click on <code>Createa new language</code>, or to make changes to an existing language, use <code>Load language</code>.</li> <li>Translate the text in the text fields on the UI.</li> <li>Once done, use the <code>Download raw JSON</code> to download the language file.</li> <li>Send a pull request to add the file to the i18n directory on the GitHub repo. </li> </ul>"},{"location":"i18n/#using-inlang-external-service","title":"Using InLang (external service)","text":"<ul> <li>Visit https://inlang.com/editor/github.com/knadh/listmonk</li> <li>To make changes and push them, you need to log in to GitHub using OAuth and fork the project from the UI.</li> <li>Translate the text in the input fields on the UI. You can use the filters to see only the necessary translations.</li> <li>Once you're done, push the changes from the UI and click on \"Open a pull request.\" This will take you to GitHub, where you can write a PR message.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>listmonk is a simple binary application that requires a Postgres database instance to run. The binary can be downloaded and run manually, or it can be run as a container with Docker compose.</p>"},{"location":"installation/#binary","title":"Binary","text":"<ol> <li>Download the latest release and extract the listmonk binary. <code>amd64</code> is the main one. It works for Intel and x86 CPUs.</li> <li><code>./listmonk --new-config</code> to generate config.toml. Edit the file.</li> <li><code>./listmonk --install</code> to install the tables in the Postgres DB (\u2a7e 12).</li> <li>Run <code>./listmonk</code> and visit <code>http://localhost:9000</code> to create the Super Admin user and login.</li> </ol> <p>Tip</p> <p>To set the Super Admin username and password during installation, set the environment variables: <code>LISTMONK_ADMIN_USER=myuser LISTMONK_ADMIN_PASSWORD=xxxxx ./listmonk --install</code></p>"},{"location":"installation/#docker","title":"Docker","text":"<p>The latest image is available on DockerHub at <code>listmonk/listmonk:latest</code></p> <p>The recommended method is to download the docker-compose.yml file, customize it for your environment and then to simply run <code>docker compose up -d</code>.</p> <pre><code># Download the compose file to the current directory.\ncurl -LO https://github.com/knadh/listmonk/raw/master/docker-compose.yml\n\n# Run the services in the background.\ndocker compose up -d\n</code></pre> <p>Then, visit <code>http://localhost:9000</code> to create the Super Admin user and login.</p> <p>Tip</p> <p>To set the Super Admin username and password during setup, set the environment variables (only the first time): <code>LISTMONK_ADMIN_USER=myuser LISTMONK_ADMIN_PASSWORD=xxxxx docker compose up -d</code></p>"},{"location":"installation/#mounting-a-custom-configtoml","title":"Mounting a custom config.toml","text":"<p>The docker-compose file includes all necessary listmonk configuration as environment variables, <code>LISTMONK_*</code>. If you would like to remove those and mount a config.toml instead:</p>"},{"location":"installation/#1-save-the-configtoml-file-on-the-host","title":"1. Save the config.toml file on the host","text":"<pre><code>[app]\naddress = \"0.0.0.0:9000\"\n\n# Database.\n[db]\nhost = \"listmonk_db\" # Postgres container name in the compose file.\nport = 5432\nuser = \"listmonk\"\npassword = \"listmonk\"\ndatabase = \"listmonk\"\nssl_mode = \"disable\"\nmax_open = 25\nmax_idle = 25\nmax_lifetime = \"300s\"\n</code></pre>"},{"location":"installation/#2-mount-the-config-file-in-docker-composeyml","title":"2. Mount the config file in docker-compose.yml","text":"<pre><code>  app:\n    ...\n    volumes:\n    - /path/on/your/host/config.toml:/listmonk/config.toml\n</code></pre>"},{"location":"installation/#3-change-the-config-flags-in-the-command-section-to-point-to-the-path","title":"3. Change the <code>--config ''</code> flags in the <code>command:</code> section to point to the path","text":"<pre><code>command: [sh, -c, \"./listmonk --install --idempotent --yes --config /listmonk/config.toml &amp;&amp; ./listmonk --upgrade --yes --config /listmonk/config.toml &amp;&amp; ./listmonk --config /listmonk/config.toml\"]\n</code></pre>"},{"location":"installation/#compiling-from-source","title":"Compiling from source","text":"<p>To compile the latest unreleased version (<code>master</code> branch):</p> <ol> <li>Make sure <code>go</code>, <code>nodejs</code>, and <code>yarn</code> are installed on your system.</li> <li><code>git clone git@github.com:knadh/listmonk.git</code></li> <li><code>cd listmonk &amp;&amp; make dist</code>. This will generate the <code>listmonk</code> binary.</li> </ol>"},{"location":"installation/#release-candidate-rc","title":"Release candidate (RC)","text":"<p>The <code>master</code> branch with bleeding edge changes is periodically built and published as <code>listmonk/listmonk:rc</code> on DockerHub. To run the latest pre-release version, replace all instances of <code>listmonk/listmonk:latest</code> with <code>listmonk/listmonk:rc</code> in the docker-compose.yml file and follow the Docker installation steps above. While it is generally safe to run release candidate versions, they may have issues that only get resolved in a general release.</p>"},{"location":"installation/#helm-chart-for-kubernetes","title":"Helm chart for Kubernetes","text":"<p>A helm chart for easily installing listmonk on a kubernetes cluster is made available by community here.</p> <p>In order to use the helm chart, you can configure <code>values.yaml</code> according to your needs, and then run the following command:</p> <pre><code>$ helm upgrade \\\n    --create-namespace \\\n    --install listmonk listmonk \\\n    --namespace listmonk \\\n    --repo https://th0th.github.io/helm-charts \\\n    --values values.yaml \\\n    --version 0.1.0\n</code></pre>"},{"location":"installation/#3rd-party-hosting","title":"3rd party hosting","text":""},{"location":"installation/#tutorials","title":"Tutorials","text":"<ul> <li>Listmonk with Forward Email for Secure Newsletter Delivery</li> <li>Informal step-by-step on how to get started with listmonk using Railway</li> <li>Step-by-step tutorial for installation and all basic functions. Amazon EC2, SES, docker &amp; binary</li> <li>Step-by-step guide on how to install and set up listmonk on AWS Lightsail with docker (rameerez)</li> <li>Quick setup on any cloud server using docker and caddy</li> <li>Binary install on Ubuntu 22.04 as a service</li> <li>Binary install on Ubuntu 18.04 as a service (Apache &amp; Plesk)</li> <li>Binary and docker on linux (techviewleo)</li> <li>Binary install on your PC. Discussions of limitations: [1][2].</li> <li>Docker on Rocky Linux 8 (nginx, Let's Encrypt SSL)</li> <li>Docker with nginx reverse proxy, certbot SSL, and Gmail SMTP</li> <li>Install Listmonk on Self-hosting with Pre-Configured AMI Package at AWS by Single Click</li> <li>Tutorial for deploying on Fly.io -- Currently not working</li> </ul>"},{"location":"messengers/","title":"Messengers","text":"<p>listmonk supports multiple custom messaging backends in additional to the default SMTP e-mail backend, enabling not just e-mail campaigns, but arbitrary message campaigns such as SMS, FCM notifications etc.</p> <p>A Messenger is a web service that accepts a campaign message pushed to it as a JSON request, which the service can in turn broadcast as SMS, FCM etc. Messengers are registered in the Settings -&gt; Messengers UI, and can be selected on individual campaigns.</p> <p>Messengers support optional BasicAuth authentication. <code>Plain text</code> format for campaign content is ideal for messengers such as SMS and FCM.</p> <p>When a campaign starts, listmonk POSTs messages in the following format to the selected messenger's endpoint. The endpoint should return a <code>200 OK</code> response in case of a successful request.</p> <p>The address required to broadcast the message, for instance, a phone number or an FCM ID, is expected to be stored and relayed as subscriber attributes. </p> <pre><code>{\n    \"subject\": \"Welcome to listmonk\",\n    \"body\": \"The message body\",\n    \"content_type\": \"plain\",\n    \"recipients\": [{\n        \"uuid\": \"e44b4135-1e1d-40c5-8a30-0f9a886c2884\",\n        \"email\": \"anon@example.com\",\n        \"name\": \"Anon Doe\",\n        \"attribs\": {\n            \"phone\": \"123123123\",\n            \"fcm_id\": \"2e7e4b512e7e4b512e7e4b51\",\n            \"city\": \"Bengaluru\"\n        },\n        \"status\": \"enabled\"\n    }],\n    \"campaign\": {\n        \"uuid\": \"2e7e4b51-f31b-418a-a120-e41800cb689f\",\n        \"name\": \"Test campaign\",\n        \"tags\": [\"test-campaign\"]\n    }\n}\n</code></pre>"},{"location":"messengers/#messenger-implementations","title":"Messenger implementations","text":"<p>Following is a list of HTTP messenger servers that connect to various backends.</p> Name Backend listmonk-messenger AWS Pinpoint SMS listmonk-verimor-gateway Verimor listmonk-mailersend Mailersend listmonk-novu-messenger Novu listmonk-push-messenger Google FCM"},{"location":"oidc/","title":"OIDC SSO","text":""},{"location":"oidc/#oidc-single-sign-on","title":"OIDC Single Sign On","text":"<p>Listmonk supports single sign-on with OIDC (OpenID Connect). Any standards compliant OIDC provider can be configured in Settings -&gt; Security -&gt; OIDC</p>"},{"location":"oidc/#user-auto-creation","title":"User auto-creation","text":"<p>If <code>Settings -&gt; Security -&gt; OIDC -&gt; Auto-create users</code> is turned on, when users login via OIDC, an account is auto-created if an existing account is not found (based on the OIDC e-mail ID).</p>"},{"location":"oidc/#tutorials","title":"Tutorials","text":"<p>Tutorials for configuring listmonk SSO with popular OIDC providers.</p>"},{"location":"oidc/#keycloak","title":"Keycloak","text":"<p>Keycloak configuration for listmonk SSO integration.</p>"},{"location":"oidc/#1-create-a-new-client-in-keycloak","title":"1. Create a new client in Keycloak","text":"<p>In the Keycloak admin, use an existing realm, or create a new realm. Create a new client in <code>Clients \u2192 Create</code>.</p> <ul> <li>General Settings<ul> <li>Client type: <code>OpenID Connect</code></li> <li>Client ID: <code>listmonk</code> (or any preferred name)</li> <li>Name: Optional descriptive name (e.g., \"listmonk SSO\")</li> </ul> </li> <li>Capability Config:<ul> <li>Client authentication: On</li> <li>Authorization: On</li> <li>Authentication Flow<ul> <li>Standard Flow: On</li> <li>Direct Access grants: On</li> </ul> </li> </ul> </li> <li>Login Settings:<ul> <li>Root URL: Copy the Redirect URL for oAuth provider value from listmonk Admin -&gt; Settings -&gt; Security -&gt; OIDC. It will look like <code>https://listmonk.yoursite.com/auth/oidc</code></li> <li>Valid redirect URIs: Same as the Root URL above</li> <li>Valid post logout redirect URIs: *</li> </ul> </li> </ul> <p>After the client creation steps above, go to the client's <code>Credentials</code> tab and copy the <code>Client Secret</code>.</p>"},{"location":"oidc/#2-configure-listmonk","title":"2. Configure Listmonk","text":"<ol> <li>In Listmonk Admin -&gt; Settings -&gt; Security -&gt; OIDC.<ul> <li>Enable OIDC SSO: Turn on</li> <li>Provider URL: <code>https://keycloak.yoursite.com/realms/{realm}</code> (replace <code>{realm}</code> with the chosen realm name). This URL is as of v26.3 and may differ across Keycloak versions.</li> <li>Provider name: Set a name to show on the listmonk login form, eg: <code>Login with OrgName</code></li> <li>Client ID: Client ID set in Keycloak, eg: <code>listmonk</code></li> <li>Client Secret: Client Secret copied from Keycloak</li> <li>Auto-create users from SSO: (Optional) Enable to automatically create users who don't exist</li> <li>Default user role: (Required if auto-create enabled) Select role for new users</li> </ul> </li> </ol>"},{"location":"oidc/#authentik","title":"Authentik","text":"<p>Authentik configuration for listmonk SSO integration.</p>"},{"location":"oidc/#1-create-a-new-oidc-provider-in-authentik","title":"1. Create a new OIDC provider in Authentik","text":"<p>In the Authentik admin interface, create a new OIDC provider for listmonk.</p> <ul> <li>Provider Settings:  <ul> <li>Name: <code>listmonk</code> (or any preferred name)</li> <li>Signing Key: <code>authentik Self-signed Certificate</code></li> <li>Client Type: <code>Confidential</code></li> <li>Client ID: <code>listmonk</code> (or any preferred name)</li> <li>Redirect URIs: Copy the Redirect URL for oAuth provider value from listmonk Admin -&gt; Settings -&gt; Security -&gt; OIDC. It will look like <code>https://listmonk.yoursite.com/auth/oidc</code></li> </ul> </li> </ul> <p>After creating the provider, copy the Client Secret.</p>"},{"location":"oidc/#2-create-an-application-in-authentik","title":"2. Create an application in Authentik","text":"<p>Create a new application and connect it to the newly created provider.</p> <ul> <li>Application Settings:<ul> <li>Name: <code>listmonk</code> (or any preferred name)</li> <li>Slug: <code>listmonk</code> (or any preferred slug. Used in the redirect URL)</li> <li>Provider: Select the OIDC provider created in the previous step</li> </ul> </li> </ul>"},{"location":"oidc/#3-configure-listmonk","title":"3. Configure listmonk","text":"<p>In listmonk Admin \u2192 Settings \u2192 Security \u2192 OIDC:</p> <ul> <li>Enable OIDC SSO: Turn on</li> <li>Provider URL: <code>https://authentik.yoursite.com/application/o/{slug}/</code> (replace <code>{slug}</code> with the application's slug)</li> <li>Provider Name: Set a name to show on the login form (e.g., <code>Login with OrgName</code>)</li> <li>Client ID: Client ID set in Authentik (e.g., <code>listmonk</code>)</li> <li>Client Secret: Client Secret copied from Authentik</li> <li>Auto-create users from SSO: (Optional) Enable to automatically create users who don't exist</li> <li>Default user role: (Required if auto-create enabled) Select role for new users</li> </ul>"},{"location":"querying-and-segmentation/","title":"Querying and segmenting subscribers","text":"<p>listmonk allows the writing of partial Postgres SQL expressions to query, filter, and segment subscribers.</p>"},{"location":"querying-and-segmentation/#database-fields","title":"Database fields","text":"<p>These are the fields in the subscriber database that can be queried.</p> Field Description <code>subscribers.uuid</code> The randomly generated unique ID of the subscriber <code>subscribers.email</code> E-mail ID of the subscriber <code>subscribers.name</code> Name of the subscriber <code>subscribers.status</code> Status of the subscriber (enabled, disabled, blocklisted) <code>subscribers.attribs</code> Map of arbitrary attributes represented as JSON. Accessed via the <code>-&gt;</code> and <code>-&gt;&gt;</code> Postgres operator. <code>subscribers.created_at</code> Timestamp when the subscriber was first added <code>subscribers.updated_at</code> Timestamp when the subscriber was modified"},{"location":"querying-and-segmentation/#sample-attributes","title":"Sample attributes","text":"<p>Here's a sample JSON map of attributes assigned to an imaginary subscriber.</p> <pre><code>{\n  \"city\": \"Bengaluru\",\n  \"likes_tea\": true,\n  \"spoken_languages\": [\"English\", \"Malayalam\"],\n  \"projects\": 3,\n  \"stack\": {\n    \"frameworks\": [\"echo\", \"go\"],\n    \"languages\": [\"go\", \"python\"],\n    \"preferred_language\": \"go\"\n  }\n}\n</code></pre> <p></p>"},{"location":"querying-and-segmentation/#sample-sql-query-expressions","title":"Sample SQL query expressions","text":""},{"location":"querying-and-segmentation/#find-a-subscriber-by-e-mail","title":"Find a subscriber by e-mail","text":"<pre><code>-- Exact match\nsubscribers.email = 'some@domain.com'\n\n-- Partial match to find e-mails that end in @domain.com.\nsubscribers.email LIKE '%@domain.com'\n</code></pre>"},{"location":"querying-and-segmentation/#find-a-subscriber-by-name","title":"Find a subscriber by name","text":"<pre><code>-- Find all subscribers whose name start with John.\nsubscribers.email LIKE 'John%'\n</code></pre>"},{"location":"querying-and-segmentation/#multiple-conditions","title":"Multiple conditions","text":"<pre><code>-- Find all Johns who have been blocklisted.\nsubscribers.email LIKE 'John%' AND status = 'blocklisted'\n</code></pre>"},{"location":"querying-and-segmentation/#querying-subscribers-who-viewed-the-campaign-email","title":"Querying subscribers who viewed the campaign email","text":"<pre><code>-- Find all subscribers who viewed the campaign email.\nEXISTS(SELECT 1 FROM campaign_views WHERE campaign_views.subscriber_id=subscribers.id AND campaign_views.campaign_id=&lt;put_id_of_campaign&gt;)\n</code></pre>"},{"location":"querying-and-segmentation/#querying-attributes","title":"Querying attributes","text":"<pre><code>-- The -&gt;&gt; operator returns the value as text. Find all subscribers\n-- who live in Bengaluru and have done more than 3 projects.\n-- Here 'projects' is cast into an integer so that we can apply the\n-- numerical operator &gt;\nsubscribers.attribs-&gt;&gt;'city' = 'Bengaluru' AND\n    (subscribers.attribs-&gt;&gt;'projects')::INT &gt; 3\n</code></pre>"},{"location":"querying-and-segmentation/#querying-nested-attributes","title":"Querying nested attributes","text":"<pre><code>-- Find all blocklisted subscribers who like to drink tea, can code Python\n-- and prefer coding Go.\n--\n-- The -&gt; operator returns the value as a structure. Here, the \"languages\" field\n-- The ? operator checks for the existence of a value in a list.\nsubscribers.status = 'blocklisted' AND\n    (subscribers.attribs-&gt;&gt;'likes_tea')::BOOLEAN = true AND\n    subscribers.attribs-&gt;'stack'-&gt;'languages' ? 'python' AND\n    subscribers.attribs-&gt;'stack'-&gt;&gt;'preferred_language' = 'go'\n</code></pre> <p>To learn how to write SQL expressions to do advancd querying on JSON attributes, refer to the Postgres JSONB documentation.</p>"},{"location":"roles-and-permissions/","title":"User roles and permissions","text":"<p>listmonk supports (&gt;= v4.0.0) creating systems users with granular permissions to various features, including list-specific permissions. Users can login with a username and password, or via an OIDC (OpenID Connect) handshake if an auth provider is connected. Various permissions can be grouped into \"user roles\", which can be assigned to users. List-specific permissions can be grouped into \"list roles\".</p>"},{"location":"roles-and-permissions/#user-roles","title":"User roles","text":"<p>A user role is a collection of user related permissions. User roles are attached to user accounts. User roles can be managed in <code>Admin -&gt; Users -&gt; User roles</code> The permissions are described below.</p> Group Permission Description lists lists:get_all Get details of all lists lists:manage_all Create, update, and delete all lists subscribers subscribers:get Get individual subscriber details subscribers:get_all Get all subscribers and their details subscribers:manage Add, update, and delete subscribers subscribers:import Import subscribers from external files subscribers:sql_query Run raw SQL queries on subscriber data. WARNING: This permission allows execution of arbitrary SQL expressions and SQL functions. While it is a readonly feature designed to allow querying of all lists and subscribers directly from the database superceding individual list and subscriber permissions above, raw SQL expressions makes it possible to obtain Postgres database configuration such as version and paths. Give this permission only to trusted users. tx:send Send transactional messages to subscribers campaigns campaigns:get Get and view campaigns belonging to permitted lists campaigns:get_all Get and view campaigns across all lists campaigns:get_analytics Access campaign performance metrics campaigns:manage Create, update, and delete campaigns bounces bounces:get Get email bounce records bounces:manage Process and handle bounced emails webhooks:post_bounce Receive bounce notifications via webhook media media:get Get uploaded media files media:manage Upload, update, and delete media templates templates:get Get email templates templates:manage Create, update, and delete templates users users:get Get system user accounts users:manage Create, update, and delete user accounts roles:get Get user roles and permissions roles:manage Create and modify user roles settings settings:get Get system settings settings:manage Modify system configuration settings:maintain Perform system maintenance tasks"},{"location":"roles-and-permissions/#list-roles","title":"List roles","text":"<p>A list role is a collection of permissions assigned per list. Each list can be assigned a view (read) or manage (update) permission. List roles are attached to user accounts. Only the lists defined in a list role is accessible by the user, be it on the admin UI or via API calls. Do note that the <code>lists:get_all</code> and <code>lists:manage_all</code> permissions in user roles override all per-list permissions.</p>"},{"location":"roles-and-permissions/#api-users","title":"API users","text":"<p>A user account can be of two types, a regular user or an API user. API users are meant for intertacting with the listmonk APIs programmatically. Unlike regular user accounts that have custom passwords or OIDC for authentication, API users get an automatically generated secret token.</p>"},{"location":"templating/","title":"Templating","text":"<p>A template is a re-usable HTML design that can be used across campaigns and transactional messages. Most commonly, templates have standard header and footer areas with logos and branding elements, where campaign content is inserted in the middle.</p> <p>listmonk supports Go template expressions that lets you create powerful, dynamic HTML templates. It also integrates 100+ useful Sprig template functions.</p> <p>Warning</p> <p>Sprig template functions are powerful and Turing-complete, allowing programming of complex behaviour in templates. This means that it is also possible to program undesired behaviour, such as overloading memory on the host by concatenating large strings in a loop. Ensure that templating (campaigns, templates) permissions are given only to trusted users.</p>"},{"location":"templating/#campaign-templates","title":"Campaign templates","text":"<p>Campaign templates are used in an e-mail campaigns. These template are created and managed on the UI under <code>Campaigns -&gt; Templates</code>, and are selected when creating new campaigns.</p>"},{"location":"templating/#transactional-templates","title":"Transactional templates","text":"<p>Transactional templates are used for sending arbitrary transactional messages using the transactional API. These template are created and managed on the UI under <code>Campaigns -&gt; Templates</code>.</p>"},{"location":"templating/#template-expressions","title":"Template expressions","text":"<p>There are several template functions and expressions that can be used in campaign and template bodies. They are written in the form <code>{{ .Subscriber.Email }}</code>, that is, an expression between double curly braces <code>{{</code> and <code>}}</code>.</p>"},{"location":"templating/#subscriber-fields","title":"Subscriber fields","text":"Expression Description <code>{{ .Subscriber.UUID }}</code> The randomly generated unique ID of the subscriber <code>{{ .Subscriber.Email }}</code> E-mail ID of the subscriber <code>{{ .Subscriber.Name }}</code> Name of the subscriber <code>{{ .Subscriber.FirstName }}</code> First name of the subscriber (automatically extracted from the name) <code>{{ .Subscriber.LastName }}</code> Last name of the subscriber (automatically extracted from the name) <code>{{ .Subscriber.Status }}</code> Status of the subscriber (enabled, disabled, blocklisted) <code>{{ .Subscriber.Attribs }}</code> Map of arbitrary attributes. Fields can be accessed with <code>.</code>, eg: <code>.Subscriber.Attribs.city</code> <code>{{ .Subscriber.CreatedAt }}</code> Timestamp when the subscriber was first added <code>{{ .Subscriber.UpdatedAt }}</code> Timestamp when the subscriber was modified"},{"location":"templating/#campaigns","title":"Campaigns","text":"Expression Description <code>{{ .Campaign.UUID }}</code> The randomly generated unique ID of the campaign <code>{{ .Campaign.Name }}</code> Internal name of the campaign <code>{{ .Campaign.Subject }}</code> E-mail subject of the campaign <code>{{ .Campaign.FromEmail }}</code> The e-mail address from which the campaign is being sent"},{"location":"templating/#functions","title":"Functions","text":"Function Description <code>{{ Date \"2006-01-01\" }}</code> Prints the current datetime for the given format expressed as a Go date layout <code>{{ TrackLink \"https://link.com\" }}</code> Takes a URL and generates a tracking URL over it. For use in campaign bodies and templates. <code>https://link.com@TrackLink</code> Shorthand for <code>TrackLink</code>. Eg: <code>&lt;a href=\"https://link.com@TrackLink\"&gt;Link&lt;/a&gt;</code> <code>{{ TrackView }}</code> Inserts a single tracking pixel. Should only be used once, ideally in the template footer. <code>{{ UnsubscribeURL }}</code> Unsubscription and Manage preferences URL. Ideal for use in the template footer. <code>{{ MessageURL }}</code> URL to view the hosted version of an e-mail message. <code>{{ OptinURL }}</code> URL to the double-optin confirmation page. <code>{{ Safe \"&lt;!-- comment --&gt;\" }}</code> Add any HTML code as it is."},{"location":"templating/#sprig-functions","title":"Sprig functions","text":"<p>listmonk integrates the Sprig library that offers 100+ utility functions for working with strings, numbers, dates etc. that can be used in templating. Refer to the Sprig documentation for the full list of functions.</p>"},{"location":"templating/#example-template","title":"Example template","text":"<p>The expression <code>{{ template \"content\" . }}</code> should appear exactly once in every template denoting the spot where an e-mail's content is inserted. Here's a sample HTML e-mail that has a fixed header and footer that inserts the content in the middle.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n      body {\n        background: #eee;\n        font-family: Arial, sans-serif;\n        font-size: 6px;\n        color: #111;\n      }\n      header {\n        border-bottom: 1px solid #ddd;\n        padding-bottom: 30px;\n        margin-bottom: 30px;\n      }\n      .container {\n        background: #fff;\n        width: 450px;\n        margin: 0 auto;\n        padding: 30px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;section class=\"container\"&gt;\n      &lt;header&gt;\n        &lt;!-- This will appear in the header of all e-mails.\n             The subscriber's name will be automatically inserted here. //--&gt;\n        Hi {{ .Subscriber.FirstName }}!\n      &lt;/header&gt;\n\n      &lt;!-- This is where the e-mail body will be inserted //--&gt;\n      &lt;div class=\"content\"&gt;\n        {{ template \"content\" . }}\n      &lt;/div&gt;\n\n      &lt;footer&gt;\n        Copyright 2019. All rights Reserved.\n      &lt;/footer&gt;\n\n      &lt;!-- The tracking pixel will be inserted here //--&gt;\n      {{ TrackView }}\n    &lt;/section&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Info</p> <p>For use with plaintext campaigns, create a template with no HTML content and just the placeholder <code>{{ template \"content\" . }}</code></p>"},{"location":"templating/#example-campaign-body","title":"Example campaign body","text":"<p>Campaign bodies can be composed using the built-in WYSIWYG editor or as raw HTML documents. Assuming that the subscriber has a set of attributes defined, this example shows how to render those values in a campaign.</p> <pre><code>Hey, did you notice how the template showed your first name?\nYour last name is {{.Subscriber.LastName }}.\n\nYou have done {{ .Subscriber.Attribs.projects }} projects.\n\n\n{{ if eq .Subscriber.Attribs.city \"Bengaluru\" }}\n  You live in Bangalore!\n{{ else }}\n  Where do you live?\n{{ end }}\n\n\nHere is a link for you to click that will be tracked.\n&lt;a href=\"{{ TrackLink \"https://google.com\" }}\"&gt;Google&lt;/a&gt;\n</code></pre> <p>The above example uses an <code>if</code> condition to show one of two messages depending on the value of a subscriber attribute. Many such dynamic expressions are possible with Go templating expressions.</p>"},{"location":"templating/#system-templates","title":"System templates","text":"<p>System templates are used for rendering public user-facing pages such as the subscription management page, and in automatically generated system e-mails such as the opt-in confirmation e-mail. These are bundled into listmonk but can be customized by copying the static directory locally, and passing its path to listmonk with the <code>./listmonk --static-dir=your/custom/path</code> flag.</p> <p>You can fetch the static files with: <code>mkdir -p /home/ubuntu/listmonk/static ; wget -O - https://github.com/knadh/listmonk/archive/master.tar.gz | tar xz -C /home/ubuntu/listmonk/static --strip=2 \"listmonk-master/static\"</code></p> <p>Docker example, binary example.</p>"},{"location":"templating/#public-pages","title":"Public pages","text":"/static/public/ <code>index.html</code> Base template with the header and footer that all pages use. <code>home.html</code> Landing page on the root domain with the login button. <code>message.html</code> Generic success / failure message page. <code>optin.html</code> Opt-in confirmation page. <code>subscription.html</code> Subscription management page with options for data export and wipe. <code>subscription-form.html</code> List selection and subscription form page. <p>To edit the appearance of the public pages using CSS and Javascript, head to Settings &gt; Appearance &gt; Public:</p> <p></p>"},{"location":"templating/#system-e-mails","title":"System e-mails","text":"/static/email-templates/ <code>base.html</code> Base template with the header and footer that all system generated e-mails use. <code>campaign-status.html</code> E-mail notification that is sent to admins on campaign start, completion etc. <code>import-status.html</code> E-mail notification that is sent to admins on finish of an import job. <code>subscriber-data.html</code> E-mail that is sent to subscribers when they request a full dump of their private data. <code>subscriber-optin.html</code> Automatic opt-in confirmation e-mail that is sent to an unconfirmed subscriber when they are added. <code>subscriber-optin-campaign.html</code> E-mail content that's inserted into a campaign body when starting an opt-in campaign from the lists page. <code>default.tpl</code> Default campaign template that is created in Campaigns -&gt; Templates when listmonk is first installed. This is not used after that. <p>Info</p> <p>To turn system e-mail templates to plaintext, remove <code>&lt;!doctype html&gt;</code> from base.html and remove all HTML tags from the templates while retaining the Go templating code.</p>"},{"location":"upgrade/","title":"Upgrade","text":"<p>Warning</p> <p>Always take a backup of the Postgres database before upgrading listmonk</p>"},{"location":"upgrade/#binary","title":"Binary","text":"<ul> <li>Stop the running instance of listmonk.</li> <li>Download the latest release and extract the listmonk binary and overwrite the previous version.</li> <li><code>./listmonk --upgrade</code> to upgrade an existing database schema. Upgrades are idempotent and running them multiple times have no side effects.</li> <li>Run <code>./listmonk</code> again.</li> </ul> <p>If you installed listmonk as a service, you will need to stop it before overwriting the binary. Something like <code>sudo systemctl stop listmonk</code> or <code>sudo service listmonk stop</code> should work. Then overwrite the binary with the new version, then run <code>./listmonk --upgrade, and</code>start` it back with the same commands.</p> <p>If it's not running as a service, <code>pkill -9 listmonk</code> will stop the listmonk process.</p>"},{"location":"upgrade/#docker","title":"Docker","text":"<p>Important: The following instructions are for the new docker-compose.yml file.</p> <pre><code>docker compose down app\ndocker compose pull\ndocker compose up app -d\n</code></pre> <p>If you are using an older docker-compose.yml file, you have to run the <code>--upgrade</code> step manually.</p> <pre><code>docker-compose down\ndocker-compose pull &amp;&amp; docker-compose run --rm app ./listmonk --upgrade\ndocker-compose up -d app db\n</code></pre>"},{"location":"upgrade/#railway","title":"Railway","text":"<ul> <li>Head to your dashboard, and select your Listmonk project.</li> <li>Select the GitHub deployment service.</li> <li>In the Deployment tab, head to the latest deployment, click on the three vertical dots to the right, and select \"Redeploy\".</li> </ul>"},{"location":"upgrade/#downgrade","title":"Downgrade","text":"<p>To restore a previous version, you have to restore the DB for that particular version. DBs that have been upgraded with a particular version shouldn't be used with older versions. There may be DB changes that a new version brings that are incompatible with previous versions.</p> <p>General steps:</p> <ol> <li>Stop listmonk.</li> <li>Restore your pre-upgrade database.</li> <li>If you're using <code>docker compose</code>, edit <code>docker-compose.yml</code> and change <code>listmonk:latest</code> to <code>listmonk:v2.4.0</code> (for example).</li> <li>Restart.</li> </ol> <p>Example with docker:</p> <ol> <li>Stop listmonk (app): <pre><code>sudo docker stop listmonk_app\n</code></pre></li> <li>Restore your pre-upgrade db (required) (be careful, this will wipe your existing DB): <pre><code>psql -h 127.0.0.1 -p 9432 -U listmonk\ndrop schema public cascade;\ncreate schema public;\n\\q\npsql -h 127.0.0.1 -p 9432 -U listmonk -W listmonk &lt; listmonk-preupgrade-db.sql\n</code></pre></li> <li>Edit the <code>docker-compose.yml</code>: <pre><code>x-app-defaults: &amp;app-defaults\n  restart: unless-stopped\n  image: listmonk/listmonk:v2.4.0\n</code></pre></li> <li>Restart: <code>sudo docker compose up -d app db nginx certbot</code></li> </ol>"},{"location":"upgrade/#upgrading-to-v4xx","title":"Upgrading to v4.x.x","text":"<p>v4 is a major upgrade from prior versions with significant changes to certain important features and behaviour. It is the first version to have multi-user support and full fledged user management. Prior versions only had a simple BasicAuth for both admin login (browser prompt) and API calls, with the username and password defined in the TOML configuration file.</p> <p>It is safe to upgrade an older installation with <code>--upgrade</code>, but there are a few important things to keep in mind. The upgrade automatically imports the <code>admin_username</code> and <code>admin_password</code> defined in the TOML configuration into the new user management system.</p> <ol> <li> <p>New login UI: Once you upgrade an older installation, the admin dashboard will no longer show the native browser prompt for login. Instead, a new login UI rendered by listmonk is displayed at the URI <code>/admin/login</code>.</p> </li> <li> <p>API credentials: If you are using APIs to interact with listmonk, after logging in, go to Settings -&gt; Users and create a new API user with the necessary permissions. Change existing API integrations to use these credentials instead of the old username and password defined in the legacy TOML configuration file or environment variables.</p> </li> <li> <p>Credentials in TOML file or old environment variables: The admin dashboard shows a warning until the <code>admin_username</code> and <code>admin_password</code> fields are removed from the configuration file or old environment variables. In v4.x.x, these are irrelevant as user credentials are stored in the database and managed from the admin UI. IMPORTANT: if you are using APIs to interact with listmonk, follow the previous step before removing the legacy credentials.</p> </li> </ol>"},{"location":"apis/apis/","title":"APIs","text":"<p>All features that are available on the listmonk dashboard are also available as REST-like HTTP APIs that can be interacted with directly. Request and response bodies are JSON. This allows easy scripting of listmonk and integration with other systems, for instance, synchronisation with external subscriber databases.</p> <p>Note</p> <p>If you come across API calls that are yet to be documented, please consider contributing to docs.</p>"},{"location":"apis/apis/#auth","title":"Auth","text":"<p>HTTP API requests support BasicAuth and a Authorization <code>token</code> headers. API users and tokens with the required permissions can be created and managed on the admin UI (Admin -&gt; Users).</p>"},{"location":"apis/apis/#basicauth-example","title":"BasicAuth example","text":"<pre><code>curl -u \"api_user:token\" http://localhost:9000/api/lists\n</code></pre>"},{"location":"apis/apis/#authorization-token-example","title":"Authorization token example","text":"<pre><code>curl -H \"Authorization: token api_user:token\" http://localhost:9000/api/lists\n</code></pre>"},{"location":"apis/apis/#permissions","title":"Permissions","text":"<p>User role: Permissions allowed for a user are defined as a User role (Admin -&gt; User roles) and then attached to a user. </p> <p>List role: Read / write permissions per-list can be defined as a List role (Admin -&gt; User roles) and then attached to a user. </p> <p>In a User role, <code>lists:get_all</code> or <code>lists:manage_all</code> permission supercede and override any list specific permissions for a user defined in a List role.</p> <p>To manage lists and subscriber list subscriptions via API requests, ensure that the appropriate permissions are attached to the API user.</p>"},{"location":"apis/apis/#response-structure","title":"Response structure","text":""},{"location":"apis/apis/#successful-request","title":"Successful request","text":"<pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"data\": {}\n}\n</code></pre> <p>All responses from the API server are JSON with the content-type application/json unless explicitly stated otherwise. A successful 200 OK response always has a JSON response body with a status key with the value success. The data key contains the full response payload.</p>"},{"location":"apis/apis/#failed-request","title":"Failed request","text":"<pre><code>HTTP/1.1 500 Server error\nContent-Type: application/json\n\n{\n    \"message\": \"Error message\"\n}\n</code></pre> <p>A failure response is preceded by the corresponding 40x or 50x HTTP header. There may be an optional <code>data</code> key with additional payload.</p>"},{"location":"apis/apis/#timestamps","title":"Timestamps","text":"<p>All timestamp fields are in the format <code>2019-01-01T09:00:00.000000+05:30</code>. The seconds component is suffixed by the milliseconds, followed by the <code>+</code> and the timezone offset.</p>"},{"location":"apis/apis/#common-http-error-codes","title":"Common HTTP error codes","text":"Code 400 Missing or bad request parameters or values 403 Session expired or invalidate. Must relogin 404 Request resource was not found 405 Request method (GET, POST etc.) is not allowed on the requested endpoint 410 The requested resource is gone permanently 422 Unprocessable entity. Unable to process request as it contains invalid data 429 Too many requests to the API (rate limiting) 500 Something unexpected went wrong 502 The backend OMS is down and the API is unable to communicate with it 503 Service unavailable; the API is down 504 Gateway timeout; the API is unreachable"},{"location":"apis/apis/#openapi-swagger-spec","title":"OpenAPI (Swagger) spec","text":"<p>The auto-generated OpenAPI (Swagger) specification site for the APIs are available at listmonk.app/docs/swagger</p>"},{"location":"apis/bounces/","title":"API / Bounces","text":"Method Endpoint Description GET /api/bounces Retrieve bounce records. DELETE /api/bounces Delete all/multiple bounce records. DELETE /api/bounces/{bounce_id} Delete specific bounce record."},{"location":"apis/bounces/#get-apibounces","title":"GET /api/bounces","text":"<p>Retrieve the bounce records.</p>"},{"location":"apis/bounces/#parameters","title":"Parameters","text":"Name Type Required Description campaign_id number Bounce record retrieval for particular campaign id page number Page number for pagination. per_page number Results per page. Set to 'all' to return all results. source string order_by string Fields by which bounce records are ordered. Options:\"email\", \"campaign_name\", \"source\", \"created_at\". order number Sorts the result. Allowed values: 'asc','desc'"},{"location":"apis/bounces/#example-request","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/bounces?campaign_id=1&amp;page=1&amp;per_page=2' \\ \n    -H 'accept: application/json' -H 'Content-Type: application/x-www-form-urlencoded' \\\n    --data '{\"source\":\"demo\",\"order_by\":\"created_at\",\"order\":\"asc\"}'\n</code></pre>"},{"location":"apis/bounces/#example-response","title":"Example Response","text":"<pre><code>{\n  \"data\": {\n    \"results\": [\n      {\n        \"id\": 839971,\n        \"type\": \"hard\",\n        \"source\": \"demo\",\n        \"meta\": {\n          \"some\": \"parameter\"\n        },\n        \"created_at\": \"2024-08-20T23:54:22.851858Z\",\n        \"email\": \"gilles.deleuze@example.app\",\n        \"subscriber_uuid\": \"32ca1f3e-1a1d-42e1-af04-df0757f420f3\",\n        \"subscriber_id\": 60,\n        \"campaign\": {\n          \"id\": 1,\n          \"name\": \"Test campaign\"\n        }\n      },\n      {\n        \"id\": 839725,\n        \"type\": \"hard\",\n        \"source\": \"demo\",\n        \"meta\": {\n          \"some\": \"parameter\"\n        },\n        \"created_at\": \"2024-08-20T22:46:36.393547Z\",\n        \"email\": \"gottfried.leibniz@example.app\",\n        \"subscriber_uuid\": \"5911d3f4-2346-4bfc-aad2-eb319ab0e879\",\n        \"subscriber_id\": 13,\n        \"campaign\": {\n          \"id\": 1,\n          \"name\": \"Test campaign\"\n        }\n      }\n    ],\n    \"query\": \"\",\n    \"total\": 528,\n    \"per_page\": 2,\n    \"page\": 1\n  }\n}\n</code></pre>"},{"location":"apis/bounces/#delete-apibounces","title":"DELETE /api/bounces","text":"<p>To delete all bounces.</p>"},{"location":"apis/bounces/#parameters_1","title":"Parameters","text":"Name Type Required Description all bool Yes Bool to confirm deleting all bounces"},{"location":"apis/bounces/#example-request_1","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/bounces?all=true'\n</code></pre>"},{"location":"apis/bounces/#example-response_1","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/bounces/#delete-apibounces_1","title":"DELETE /api/bounces","text":"<p>To delete multiple bounce records.</p>"},{"location":"apis/bounces/#parameters_2","title":"Parameters","text":"Name Type Required Description id number Yes Id's of bounce records to delete."},{"location":"apis/bounces/#example-request_2","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/bounces?id=840965&amp;id=840168&amp;id=840879'\n</code></pre>"},{"location":"apis/bounces/#example-response_2","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/bounces/#delete-apibouncesbounce_id","title":"DELETE /api/bounces/{bounce_id}","text":"<p>To delete specific bounce id.</p>"},{"location":"apis/bounces/#example-request_3","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/bounces/840965'\n</code></pre>"},{"location":"apis/bounces/#example-response_3","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/campaigns/","title":"API / Campaigns","text":"Method Endpoint Description GET /api/campaigns Retrieve all campaigns. GET /api/campaigns/{campaign_id} Retrieve a specific campaign. GET /api/campaigns/{campaign_id}/preview Retrieve preview of a campaign. GET /api/campaigns/running/stats Retrieve stats of specified campaigns. GET /api/campaigns/analytics/{type} Retrieve view counts for a  campaign. POST /api/campaigns Create a new campaign. POST /api/campaigns/{campaign_id}/test Test campaign with arbitrary subscribers. PUT /api/campaigns/{campaign_id} Update a campaign. PUT /api/campaigns/{campaign_id}/status Change status of a campaign. PUT /api/campaigns/{campaign_id}/archive Publish campaign to public archive. DELETE /api/campaigns/{campaign_id} Delete a campaign."},{"location":"apis/campaigns/#get-apicampaigns","title":"GET /api/campaigns","text":"<p>Retrieve all campaigns.</p>"},{"location":"apis/campaigns/#example-request","title":"Example Request","text":"<pre><code> curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/campaigns?page=1&amp;per_page=100'\n</code></pre>"},{"location":"apis/campaigns/#parameters","title":"Parameters","text":"Name Type Required Description order string Sorting order: ASC for ascending, DESC for descending. order_by string Result sorting field. Options: name, status, created_at, updated_at. query string SQL query expression to filter campaigns. status []string Status to filter campaigns. Repeat in the query for multiple values. tags []string Tags to filter campaigns. Repeat in the query for multiple values. page number Page number for paginated results. per_page number Results per page. Set as 'all' for all results. no_body boolean When set to true, returns response without body content."},{"location":"apis/campaigns/#example-response","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"results\": [\n            {\n                \"id\": 1,\n                \"created_at\": \"2020-03-14T17:36:41.29451+01:00\",\n                \"updated_at\": \"2020-03-14T17:36:41.29451+01:00\",\n                \"views\": 0,\n                \"clicks\": 0,\n                \"lists\": [\n                    {\n                        \"id\": 1,\n                        \"name\": \"Default list\"\n                    }\n                ],\n                \"started_at\": null,\n                \"to_send\": 0,\n                \"sent\": 0,\n                \"uuid\": \"57702beb-6fae-4355-a324-c2fd5b59a549\",\n                \"type\": \"regular\",\n                \"name\": \"Test campaign\",\n                \"subject\": \"Welcome to listmonk\",\n                \"from_email\": \"No Reply &lt;noreply@yoursite.com&gt;\",\n                \"body\": \"&lt;h3&gt;Hi {{ .Subscriber.FirstName }}!&lt;/h3&gt;\\n\\t\\t\\tThis is a test e-mail campaign. Your second name is {{ .Subscriber.LastName }} and you are from {{ .Subscriber.Attribs.city }}.\",\n                \"body_source\": null,\n                \"send_at\": \"2020-03-15T17:36:41.293233+01:00\",\n                \"status\": \"draft\",\n                \"content_type\": \"richtext\",\n                \"tags\": [\n                    \"test-campaign\"\n                ],\n                \"template_id\": 1,\n                \"messenger\": \"email\"\n            }\n        ],\n        \"query\": \"\",\n        \"total\": 1,\n        \"per_page\": 20,\n        \"page\": 1\n    }\n}\n</code></pre>"},{"location":"apis/campaigns/#get-apicampaignscampaign_id","title":"GET /api/campaigns/{campaign_id}","text":"<p>Retrieve a specific campaign.</p>"},{"location":"apis/campaigns/#parameters_1","title":"Parameters","text":"Name Type Required Description campaign_id number Yes Campaign ID. no_body boolean When set to true, returns response without body content."},{"location":"apis/campaigns/#example-request_1","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/campaigns/1'\n</code></pre>"},{"location":"apis/campaigns/#example-response_1","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"id\": 1,\n        \"created_at\": \"2020-03-14T17:36:41.29451+01:00\",\n        \"updated_at\": \"2020-03-14T17:36:41.29451+01:00\",\n        \"views\": 0,\n        \"clicks\": 0,\n        \"lists\": [\n            {\n                \"id\": 1,\n                \"name\": \"Default list\"\n            }\n        ],\n        \"started_at\": null,\n        \"to_send\": 0,\n        \"sent\": 0,\n        \"uuid\": \"57702beb-6fae-4355-a324-c2fd5b59a549\",\n        \"type\": \"regular\",\n        \"name\": \"Test campaign\",\n        \"subject\": \"Welcome to listmonk\",\n        \"from_email\": \"No Reply &lt;noreply@yoursite.com&gt;\",\n        \"body\": \"&lt;h3&gt;Hi {{ .Subscriber.FirstName }}!&lt;/h3&gt;\\n\\t\\t\\tThis is a test e-mail campaign. Your second name is {{ .Subscriber.LastName }} and you are from {{ .Subscriber.Attribs.city }}.\",\n        \"body_source\": null,\n        \"send_at\": \"2020-03-15T17:36:41.293233+01:00\",\n        \"status\": \"draft\",\n        \"content_type\": \"richtext\",\n        \"tags\": [\n            \"test-campaign\"\n        ],\n        \"template_id\": 1,\n        \"messenger\": \"email\"\n    }\n}\n</code></pre>"},{"location":"apis/campaigns/#get-apicampaignscampaign_idpreview","title":"GET /api/campaigns/{campaign_id}/preview","text":"<p>Preview a specific campaign.</p>"},{"location":"apis/campaigns/#parameters_2","title":"Parameters","text":"Name Type Required Description campaign_id number Yes Campaign ID to preview."},{"location":"apis/campaigns/#example-request_2","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/campaigns/1/preview'\n</code></pre>"},{"location":"apis/campaigns/#example-response_2","title":"Example Response","text":"<pre><code>&lt;h3&gt;Hi John!&lt;/h3&gt;\nThis is a test e-mail campaign. Your second name is Doe and you are from Bengaluru.\n</code></pre>"},{"location":"apis/campaigns/#get-apicampaignsrunningstats","title":"GET /api/campaigns/running/stats","text":"<p>Retrieve stats of specified campaigns.</p>"},{"location":"apis/campaigns/#parameters_3","title":"Parameters","text":"Name Type Required Description campaign_id number Yes Campaign IDs to get stats for."},{"location":"apis/campaigns/#example-request_3","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/campaigns/running/stats?campaign_id=1'\n</code></pre>"},{"location":"apis/campaigns/#example-response_3","title":"Example Response","text":"<pre><code>{\n    \"data\": []\n}\n</code></pre>"},{"location":"apis/campaigns/#get-apicampaignsanalyticstype","title":"GET /api/campaigns/analytics/{type}","text":"<p>Retrieve stats of specified campaigns.</p>"},{"location":"apis/campaigns/#parameters_4","title":"Parameters","text":"Name Type Required Description id number[] Yes Campaign IDs to get stats for. type string Yes Analytics type: views, links, clicks, bounces from string Yes Start value of date range. to string Yes End value of date range."},{"location":"apis/campaigns/#example-request_4","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/campaigns/analytics/views?id=1&amp;from=2024-08-04&amp;to=2024-08-12'\n</code></pre>"},{"location":"apis/campaigns/#example-response_4","title":"Example Response","text":"<pre><code>{\n  \"data\": [\n    {\n      \"campaign_id\": 1,\n      \"count\": 10,\n      \"timestamp\": \"2024-08-04T00:00:00Z\"\n    },\n    {\n      \"campaign_id\": 1,\n      \"count\": 14,\n      \"timestamp\": \"2024-08-08T00:00:00Z\"\n    },\n    {\n      \"campaign_id\": 1,\n      \"count\": 20,\n      \"timestamp\": \"2024-08-09T00:00:00Z\"\n    },\n    {\n      \"campaign_id\": 1,\n      \"count\": 21,\n      \"timestamp\": \"2024-08-10T00:00:00Z\"\n    },\n    {\n      \"campaign_id\": 1,\n      \"count\": 21,\n      \"timestamp\": \"2024-08-11T00:00:00Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"apis/campaigns/#example-request_5","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/campaigns/analytics/links?id=1&amp;from=2024-08-04T18%3A30%3A00.624Z&amp;to=2024-08-12T18%3A29%3A00.624Z'\n</code></pre>"},{"location":"apis/campaigns/#example-response_5","title":"Example Response","text":"<pre><code>{\n  \"data\": [\n    {\n      \"url\": \"https://freethebears.org\",\n      \"count\": 294\n    },\n    {\n      \"url\": \"https://calmcode.io\",\n      \"count\": 278\n    },\n    {\n      \"url\": \"https://climate.nasa.gov\",\n      \"count\": 261\n    },\n    {\n      \"url\": \"https://www.storybreathing.com\",\n      \"count\": 260\n    }\n  ]\n}\n</code></pre>"},{"location":"apis/campaigns/#post-apicampaigns","title":"POST /api/campaigns","text":"<p>Create a new campaign.</p>"},{"location":"apis/campaigns/#parameters_5","title":"Parameters","text":"Name Type Required Description name string Yes Campaign name. subject string Yes Campaign email subject. lists number[] Yes List IDs to send campaign to. from_email string 'From' email in campaign emails. Defaults to value from settings if not provided. type string Yes Campaign type: 'regular' or 'optin'. content_type string Yes Content type: 'richtext', 'html', 'markdown', 'plain', 'visual'. body string Yes Content body of campaign. body_source string If content_type is <code>visual</code>, the JSON block source of the body. altbody string Alternate plain text body for HTML (and richtext) emails. send_at string Timestamp to schedule campaign. Format: 'YYYY-MM-DDTHH:MM:SSZ'. messenger string 'email' or a custom messenger defined in settings. Defaults to 'email' if not provided. template_id number Template ID to use. Defaults to default template if not provided. tags string[] Tags to mark campaign. headers JSON Key-value pairs to send as SMTP headers. Example: [{\"x-custom-header\": \"value\"}]."},{"location":"apis/campaigns/#example-request_6","title":"Example request","text":"<pre><code>curl -u \"api_user:token\" 'http://localhost:9000/api/campaigns' -X POST -H 'Content-Type: application/json;charset=utf-8' --data-raw '{\"name\":\"Test campaign\",\"subject\":\"Hello, world\",\"lists\":[1],\"from_email\":\"listmonk &lt;noreply@listmonk.yoursite.com&gt;\",\"content_type\":\"richtext\",\"messenger\":\"email\",\"type\":\"regular\",\"tags\":[\"test\"],\"template_id\":1}'\n</code></pre>"},{"location":"apis/campaigns/#example-response_6","title":"Example response","text":"<pre><code>{\n    \"data\": {\n        \"id\": 1,\n        \"created_at\": \"2021-12-27T11:50:23.333485Z\",\n        \"updated_at\": \"2021-12-27T11:50:23.333485Z\",\n        \"views\": 0,\n        \"clicks\": 0,\n        \"bounces\": 0,\n        \"lists\": [{\n            \"id\": 1,\n            \"name\": \"Default list\"\n        }],\n        \"started_at\": null,\n        \"to_send\": 1,\n        \"sent\": 0,\n        \"uuid\": \"90c889cc-3728-4064-bbcb-5c1c446633b3\",\n        \"type\": \"regular\",\n        \"name\": \"Test campaign\",\n        \"subject\": \"Hello, world\",\n        \"from_email\": \"listmonk \\u003cnoreply@listmonk.yoursite.com\\u003e\",\n        \"body\": \"\",\n        \"body_source\": null,\n        \"altbody\": null,\n        \"send_at\": null,\n        \"status\": \"draft\",\n        \"content_type\": \"richtext\",\n        \"tags\": [\"test\"],\n        \"template_id\": 1,\n        \"messenger\": \"email\"\n    }\n}\n</code></pre>"},{"location":"apis/campaigns/#post-apicampaignscampaign_idtest","title":"POST /api/campaigns/{campaign_id}/test","text":"<p>Test campaign with arbitrary subscribers.</p> <p>Use the same parameters in POST /api/campaigns in addition to the below parameters.</p>"},{"location":"apis/campaigns/#parameters_6","title":"Parameters","text":"Name Type Required Description subscribers string[] Yes List of subscriber e-mails to send the message to."},{"location":"apis/campaigns/#put-apicampaignscampaign_id","title":"PUT /api/campaigns/{campaign_id}","text":"<p>Update a campaign.</p> <p>Refer to parameters from POST /api/campaigns</p>"},{"location":"apis/campaigns/#put-apicampaignscampaign_id_1","title":"PUT /api/campaigns/{campaign_id}","text":"<p>Update a specific campaign.</p> <p>Refer to parameters from POST /api/campaigns</p>"},{"location":"apis/campaigns/#put-apicampaignscampaign_idstatus","title":"PUT /api/campaigns/{campaign_id}/status","text":"<p>Change status of a campaign.</p>"},{"location":"apis/campaigns/#parameters_7","title":"Parameters","text":"Name Type Required Description campaign_id number Yes Campaign ID to change status. status string Yes New status for campaign: 'scheduled', 'running', 'paused', 'cancelled'."},{"location":"apis/campaigns/#note","title":"Note","text":"<ul> <li>Only 'scheduled' campaigns can change status to 'draft'.</li> <li>Only 'draft' campaigns can change status to 'scheduled'.</li> <li>Only 'paused' and 'draft' campaigns can start ('running' status).</li> <li>Only 'running' campaigns can change status to 'cancelled' and 'paused'.</li> </ul>"},{"location":"apis/campaigns/#example-request_7","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X PUT 'http://localhost:9000/api/campaigns/1/status' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"status\":\"scheduled\"}'\n</code></pre>"},{"location":"apis/campaigns/#example-response_7","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"id\": 1,\n        \"created_at\": \"2020-03-14T17:36:41.29451+01:00\",\n        \"updated_at\": \"2020-04-08T19:35:17.331867+01:00\",\n        \"views\": 0,\n        \"clicks\": 0,\n        \"lists\": [\n            {\n                \"id\": 1,\n                \"name\": \"Default list\"\n            }\n        ],\n        \"started_at\": null,\n        \"to_send\": 0,\n        \"sent\": 0,\n        \"uuid\": \"57702beb-6fae-4355-a324-c2fd5b59a549\",\n        \"type\": \"regular\",\n        \"name\": \"Test campaign\",\n        \"subject\": \"Welcome to listmonk\",\n        \"from_email\": \"No Reply &lt;noreply@yoursite.com&gt;\",\n        \"body\": \"&lt;h3&gt;Hi {{ .Subscriber.FirstName }}!&lt;/h3&gt;\\n\\t\\t\\tThis is a test e-mail campaign. Your second name is {{ .Subscriber.LastName }} and you are from {{ .Subscriber.Attribs.city }}.\",\n        \"send_at\": \"2020-03-15T17:36:41.293233+01:00\",\n        \"status\": \"scheduled\",\n        \"content_type\": \"richtext\",\n        \"tags\": [\n            \"test-campaign\"\n        ],\n        \"template_id\": 1,\n        \"messenger\": \"email\"\n    }\n}\n</code></pre>"},{"location":"apis/campaigns/#put-apicampaignscampaign_idarchive","title":"PUT /api/campaigns/{campaign_id}/archive","text":"<p>Publish campaign to public archive.</p>"},{"location":"apis/campaigns/#parameters_8","title":"Parameters","text":"Name Type Required Description campaign_id number Yes Campaign ID to publish to public archive. archive bool Yes State of the public archive. archive_template_id number No Archive template id. Defaults to 0. archive_meta JSON string No Optional Metadata to use in campaign message or template.Eg: name, email. archive_slug string No Name for page to be used in public archive URL"},{"location":"apis/campaigns/#example-request_8","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X PUT 'http://localhost:8080/api/campaigns/33/archive' \n--header 'Content-Type: application/json' \n--data-raw '{\"archive\":true,\"archive_template_id\":1,\"archive_meta\":{},\"archive_slug\":\"my-newsletter-old-edition\"}'\n</code></pre>"},{"location":"apis/campaigns/#example-response_8","title":"Example Response","text":"<pre><code>{\n  \"data\": {\n    \"archive\": true,\n    \"archive_template_id\": 1,\n    \"archive_meta\": {},\n    \"archive_slug\": \"my-newsletter-old-edition\"\n  }\n}\n</code></pre>"},{"location":"apis/campaigns/#delete-apicampaignscampaign_id","title":"DELETE /api/campaigns/{campaign_id}","text":"<p>Delete a campaign.</p>"},{"location":"apis/campaigns/#parameters_9","title":"Parameters","text":"Name Type Required Description campaign_id number Yes Campaign ID to delete."},{"location":"apis/campaigns/#example-request_9","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X DELETE 'http://localhost:9000/api/campaigns/34'\n</code></pre>"},{"location":"apis/campaigns/#example-response_9","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/import/","title":"API / Import","text":"Method Endpoint Description GET /api/import/subscribers Retrieve import statistics. GET /api/import/subscribers/logs Retrieve import logs. POST /api/import/subscribers Upload a file for bulk subscriber import. DELETE /api/import/subscribers Stop and remove an import."},{"location":"apis/import/#get-apiimportsubscribers","title":"GET /api/import/subscribers","text":"<p>Retrieve the status of an ongoing import.</p>"},{"location":"apis/import/#example-request","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/import/subscribers'\n</code></pre>"},{"location":"apis/import/#example-response","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"name\": \"\",\n        \"total\": 0,\n        \"imported\": 0,\n        \"status\": \"none\"\n    }\n}\n</code></pre>"},{"location":"apis/import/#get-apiimportsubscriberslogs","title":"GET /api/import/subscribers/logs","text":"<p>Retrieve logs from an ongoing import.</p>"},{"location":"apis/import/#example-request_1","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/import/subscribers/logs'\n</code></pre>"},{"location":"apis/import/#example-response_1","title":"Example Response","text":"<pre><code>{\n    \"data\": \"2020/04/08 21:55:20 processing 'import.csv'\\n2020/04/08 21:55:21 imported finished\\n\"\n}\n</code></pre>"},{"location":"apis/import/#post-apiimportsubscribers","title":"POST /api/import/subscribers","text":"<p>Send a CSV (optionally ZIP compressed) file to import subscribers. Use a multipart form POST.</p>"},{"location":"apis/import/#parameters","title":"Parameters","text":"Name Type Required Description params JSON string Yes Stringified JSON with import parameters. file file Yes File for upload."},{"location":"apis/import/#params-json-string","title":"<code>params</code> (JSON string)","text":"Name Type Required Description mode string Yes <code>subscribe</code> or <code>blocklist</code> delim string Yes Single character indicating delimiter used in the CSV file, eg: <code>,</code> lists []number Yes Single character indicating delimiter used in the CSV file, eg: <code>,</code> overwrite bool Yes Whether to overwrite the subscriber parameters including subscriptions or ignore records that are already present in the database."},{"location":"apis/import/#example-request_2","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X POST 'http://localhost:9000/api/import/subscribers' \\\n  -F 'params={\"mode\":\"subscribe\", \"subscription_status\":\"confirmed\", \"delim\":\",\", \"lists\":[1, 2], \"overwrite\": true}' \\\n  -F \"file=@/path/to/subs.csv\"\n</code></pre>"},{"location":"apis/import/#example-response_2","title":"Example Response","text":"<pre><code>    {\n        \"mode\": \"subscribe\", // subscribe or blocklist\n        \"delim\": \",\",        // delimiter in the uploaded file\n        \"lists\":[1],         // array of list IDs to import into\n        \"overwrite\": true    // overwrite existing entries or skip them?\n    }\n</code></pre>"},{"location":"apis/import/#delete-apiimportsubscribers","title":"DELETE /api/import/subscribers","text":"<p>Stop and delete an ongoing import.</p>"},{"location":"apis/import/#example-request_3","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X DELETE 'http://localhost:9000/api/import/subscribers' \n</code></pre>"},{"location":"apis/import/#example-response_3","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"name\": \"\",\n        \"total\": 0,\n        \"imported\": 0,\n        \"status\": \"none\"\n    }\n}\n</code></pre>"},{"location":"apis/lists/","title":"API / Lists","text":"Method Endpoint Description GET /api/lists Retrieve all lists. GET /api/public/lists Retrieve public lists. GET /api/lists/{list_id} Retrieve a specific list. POST /api/lists Create a new list. PUT /api/lists/{list_id} Update a list. DELETE /api/lists/{list_id} Delete a list."},{"location":"apis/lists/#get-apilists","title":"GET /api/lists","text":"<p>Retrieve lists.</p>"},{"location":"apis/lists/#parameters","title":"Parameters","text":"Name Type Required Description query string string for list name search. status []string Status to filter lists. Repeat in the query for multiple values. tag []string Tags to filter lists. Repeat in the query for multiple values. order_by string Sort field. Options: name, status, created_at, updated_at. order string Sorting order. Options: ASC, DESC. page number Page number for pagination. per_page number Results per page. Set to 'all' to return all results."},{"location":"apis/lists/#example-request","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/lists?page=1&amp;per_page=100'\n</code></pre>"},{"location":"apis/lists/#example-response","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"results\": [\n            {\n                \"id\": 1,\n                \"created_at\": \"2020-02-10T23:07:16.194843+01:00\",\n                \"updated_at\": \"2020-03-06T22:32:01.118327+01:00\",\n                \"uuid\": \"ce13e971-c2ed-4069-bd0c-240e9a9f56f9\",\n                \"name\": \"Default list\",\n                \"type\": \"public\",\n                \"optin\": \"double\",\n                \"tags\": [\n                    \"test\"\n                ],\n                \"subscriber_count\": 2\n            },\n            {\n                \"id\": 2,\n                \"created_at\": \"2020-03-04T21:12:09.555013+01:00\",\n                \"updated_at\": \"2020-03-06T22:34:46.405031+01:00\",\n                \"uuid\": \"f20a2308-dfb5-4420-a56d-ecf0618a102d\",\n                \"name\": \"get\",\n                \"type\": \"private\",\n                \"optin\": \"single\",\n                \"tags\": [],\n                \"subscriber_count\": 0\n            }\n        ],\n        \"total\": 5,\n        \"per_page\": 20,\n        \"page\": 1\n    }\n}\n</code></pre>"},{"location":"apis/lists/#get-apipubliclists","title":"GET /api/public/lists","text":"<p>Retrieve public lists with name and uuid to submit a subscription. This is an unauthenticated call to enable scripting to subscription form.</p>"},{"location":"apis/lists/#example-request_1","title":"Example Request","text":"<pre><code>curl -X GET 'http://localhost:9000/api/public/lists'\n</code></pre>"},{"location":"apis/lists/#example-response_1","title":"Example Response","text":"<pre><code>[\n  {\n    \"uuid\": \"55e243af-80c6-4169-8d7f-bc571e0269e9\",\n    \"name\": \"Opt-in list\"\n  }\n]\n</code></pre>"},{"location":"apis/lists/#get-apilistslist_id","title":"GET /api/lists/{list_id}","text":"<p>Retrieve a specific list.</p>"},{"location":"apis/lists/#parameters_1","title":"Parameters","text":"Name Type Required Description list_id number Yes ID of the list to retrieve."},{"location":"apis/lists/#example-request_2","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/lists/5'\n</code></pre>"},{"location":"apis/lists/#example-response_2","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"id\": 5,\n        \"created_at\": \"2020-03-07T06:31:06.072483+01:00\",\n        \"updated_at\": \"2020-03-07T06:31:06.072483+01:00\",\n        \"uuid\": \"1bb246ab-7417-4cef-bddc-8fc8fc941d3a\",\n        \"name\": \"Test list\",\n        \"type\": \"public\",\n        \"optin\": \"double\",\n        \"tags\": [],\n        \"subscriber_count\": 0\n    }\n}\n</code></pre>"},{"location":"apis/lists/#post-apilists","title":"POST /api/lists","text":"<p>Create a new list.</p>"},{"location":"apis/lists/#parameters_2","title":"Parameters","text":"Name Type Required Description name string Yes Name of the new list. type string Yes Type of list. Options: private, public. optin string Yes Opt-in type. Options: single, double. tags string[] Associated tags for a list. description string No Description of the new list."},{"location":"apis/lists/#example-request_3","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X POST 'http://localhost:9000/api/lists'\n</code></pre>"},{"location":"apis/lists/#example-response_3","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"id\": 5,\n        \"created_at\": \"2020-03-07T06:31:06.072483+01:00\",\n        \"updated_at\": \"2020-03-07T06:31:06.072483+01:00\",\n        \"uuid\": \"1bb246ab-7417-4cef-bddc-8fc8fc941d3a\",\n        \"name\": \"Test list\",\n        \"type\": \"public\",\n        \"tags\": [],\n        \"subscriber_count\": 0,\n        \"description\": \"This is a test list\"\n    }\n}\nnull\n</code></pre>"},{"location":"apis/lists/#put-apilistslist_id","title":"PUT /api/lists/{list_id}","text":"<p>Update a list.</p>"},{"location":"apis/lists/#parameters_3","title":"Parameters","text":"Name Type Required Description list_id number Yes ID of the list to update. name string New name for the list. type string Type of list. Options: private, public. optin string Opt-in type. Options: single, double. tags string[] Associated tags for the list. description string Description of the new list."},{"location":"apis/lists/#example-request_4","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X PUT 'http://localhost:9000/api/lists/5' \\\n--form 'name=modified test list' \\\n--form 'type=private'\n</code></pre>"},{"location":"apis/lists/#example-response_4","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"id\": 5,\n        \"created_at\": \"2020-03-07T06:31:06.072483+01:00\",\n        \"updated_at\": \"2020-03-07T06:52:15.208075+01:00\",\n        \"uuid\": \"1bb246ab-7417-4cef-bddc-8fc8fc941d3a\",\n        \"name\": \"modified test list\",\n        \"type\": \"private\",\n        \"optin\": \"single\",\n        \"tags\": [],\n        \"subscriber_count\": 0,\n        \"description\": \"This is a test list\"\n    }\n}\n</code></pre>"},{"location":"apis/lists/#delete-apilistslist_id","title":"DELETE /api/lists/{list_id}","text":"<p>Delete a specific list.</p>"},{"location":"apis/lists/#parameters_4","title":"Parameters","text":"Name Type Required Description list_id Number Yes ID of the list to delete."},{"location":"apis/lists/#example-request_5","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/lists/1'\n</code></pre>"},{"location":"apis/lists/#example-response_5","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/media/","title":"API / Media","text":"Method Endpoint Description GET /api/media Get uploaded media file GET /api/media/{media_id} Get specific uploaded media file POST /api/media Upload media file DELETE /api/media/{media_id} Delete uploaded media file"},{"location":"apis/media/#get-apimedia","title":"GET /api/media","text":"<p>Get an uploaded media file.</p>"},{"location":"apis/media/#example-request","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/media' \\\n--header 'Content-Type: multipart/form-data; boundary=--------------------------093715978792575906250298'\n</code></pre>"},{"location":"apis/media/#example-response","title":"Example Response","text":"<pre><code>{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"uuid\": \"ec7b45ce-1408-4e5c-924e-965326a20287\",\n            \"filename\": \"Media file\",\n            \"created_at\": \"2020-04-08T22:43:45.080058+01:00\",\n            \"thumb_url\": \"/uploads/image_thumb.jpg\",\n            \"uri\": \"/uploads/image.jpg\"\n        }\n    ]\n}\n</code></pre>"},{"location":"apis/media/#get-apimediamedia_id","title":"GET /api/media/{media_id}","text":"<p>Retrieve a specific media.</p>"},{"location":"apis/media/#parameters","title":"Parameters","text":"Name Type Required Description media_id Number Yes Media ID."},{"location":"apis/media/#example-request_1","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' 'http://localhost:9000/api/media/7' \n</code></pre>"},{"location":"apis/media/#example-response_1","title":"Example Response","text":"<pre><code>{\n  \"data\": \n    {\n        \"id\": 7,\n        \"uuid\": \"62e32e97-d6ca-4441-923f-b62607000dd1\",\n        \"filename\": \"ResumeB.pdf\",\n        \"content_type\": \"application/pdf\",\n        \"created_at\": \"2024-08-06T11:28:53.888257+05:30\",\n        \"thumb_url\": null,\n        \"provider\": \"filesystem\",\n        \"meta\": {},\n        \"url\": \"http://localhost:9000/uploads/ResumeB.pdf\"\n    }\n}\n</code></pre>"},{"location":"apis/media/#post-apimedia","title":"POST /api/media","text":"<p>Upload a media file.</p>"},{"location":"apis/media/#parameters_1","title":"Parameters","text":"Field Type Required Description file File Yes Media file to upload"},{"location":"apis/media/#example-request_2","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X POST 'http://localhost:9000/api/media' \\\n--header 'Content-Type: multipart/form-data; boundary=--------------------------183679989870526937212428' \\\n--form 'file=@/path/to/image.jpg'\n</code></pre>"},{"location":"apis/media/#example-response_2","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"id\": 1,\n        \"uuid\": \"ec7b45ce-1408-4e5c-924e-965326a20287\",\n        \"filename\": \"Media file\",\n        \"created_at\": \"2020-04-08T22:43:45.080058+01:00\",\n        \"thumb_uri\": \"/uploads/image_thumb.jpg\",\n        \"uri\": \"/uploads/image.jpg\"\n    }\n}\n</code></pre>"},{"location":"apis/media/#delete-apimediamedia_id","title":"DELETE /api/media/{media_id}","text":"<p>Delete an uploaded media file.</p>"},{"location":"apis/media/#parameters_2","title":"Parameters","text":"Field Type Required Description media_id number Yes ID of media file to delete"},{"location":"apis/media/#example-request_3","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X DELETE 'http://localhost:9000/api/media/1'\n</code></pre>"},{"location":"apis/media/#example-response_3","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/sdks/","title":"SDKs and client libraries","text":"<p>A list of 3rd party client libraries and SDKs that have been written for listmonk APIs.</p> <p>Note</p> <p>The list is community sourced. They have not been verified and are not officially supported.</p> <ul> <li>WordPress - WooCommerce plugin integration for listmonk</li> <li>listmonk  \u2014 Python API client</li> <li>listmonk-api \u2014 Python API client</li> <li>frappe_listmonk \u2014 Frappe framework integration for listmonk</li> <li>auto-newsletter-listmonk \u2014 Ghost CMS integration</li> <li>listmonk-newsletter - RSS to listmonk integration for email newsletters</li> <li>listmonk-crysctal \u2014 Crystal lang API client</li> <li>terraform-provider-listmonk \u2014 Manage listmonk templates in Terraform</li> <li>listmonk-php-client \u2014 PHP API client</li> <li>php-listmonk \u2014 PHP API client</li> <li>go-listmonk \u2014 Go API client</li> <li>listmonk-nodejs-api \u2014 NodeJS API client</li> <li>listmonk-laravel \u2014 Laravel API Client</li> <li>nuxt-listmonk \u2014 Listmonk module for Nuxt.js</li> <li>listmonk-japi - Listmonk client for Java/kotlin</li> <li>listmonk-mcp \u2014 MCP (Model Context Protocol) server for Claude integration</li> <li>N8N Nodes \u2014 Adds Listmonk Nodes for N8N Automations</li> </ul>"},{"location":"apis/subscribers/","title":"API / Subscribers","text":"Method Endpoint Description GET /api/subscribers Query and retrieve subscribers. GET /api/subscribers/{subscriber_id} Retrieve a specific subscriber. GET /api/subscribers/{subscriber_id}/export Export a specific subscriber. GET /api/subscribers/{subscriber_id}/bounces Retrieve a  subscriber bounce records. POST /api/subscribers Create a new subscriber. POST /api/subscribers/{subscriber_id}/optin Sends optin confirmation email to subscribers. POST /api/public/subscription Create a public subscription. PUT /api/subscribers/lists Modify subscriber list memberships. PUT /api/subscribers/{subscriber_id} Update a specific subscriber. PUT /api/subscribers/{subscriber_id}/blocklist Blocklist a specific subscriber. PUT /api/subscribers/blocklist Blocklist one or many subscribers. PUT /api/subscribers/query/blocklist Blocklist subscribers based on SQL expression. DELETE /api/subscribers/{subscriber_id} Delete a specific subscriber. DELETE /api/subscribers/{subscriber_id}/bounces Delete a specific subscriber's bounce records. DELETE /api/subscribers Delete one or more subscribers. POST /api/subscribers/query/delete Delete subscribers based on SQL expression."},{"location":"apis/subscribers/#get-apisubscribers","title":"GET /api/subscribers","text":"<p>Retrieve all subscribers.</p>"},{"location":"apis/subscribers/#query-parameters","title":"Query parameters","text":"Name Type Required Description query string Subscriber search by SQL expression. list_id int[] ID of lists to filter by. Repeat in the query for multiple values. subscription_status string Subscription status to filter by if there are one or more <code>list_id</code>s. order_by string Result sorting field. Options: name, status, created_at, updated_at. order string Sorting order: ASC for ascending, DESC for descending. page number Page number for paginated results. per_page number Results per page. Set as 'all' for all results."},{"location":"apis/subscribers/#example-request","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers?page=1&amp;per_page=100' \n</code></pre> <pre><code>curl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers?list_id=1&amp;list_id=2&amp;page=1&amp;per_page=100'\n</code></pre> <pre><code>curl -u 'api_username:access_token' -X GET 'http://localhost:9000/api/subscribers' \\\n    --url-query 'page=1' \\\n    --url-query 'per_page=100' \\\n    --url-query \"query=subscribers.name LIKE 'Test%' AND subscribers.attribs-&gt;&gt;'city' = 'Bengaluru'\"\n</code></pre>"},{"location":"apis/subscribers/#example-response","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"results\": [\n            {\n                \"id\": 1,\n                \"created_at\": \"2020-02-10T23:07:16.199433+01:00\",\n                \"updated_at\": \"2020-02-10T23:07:16.199433+01:00\",\n                \"uuid\": \"ea06b2e7-4b08-4697-bcfc-2a5c6dde8f1c\",\n                \"email\": \"john@example.com\",\n                \"name\": \"John Doe\",\n                \"attribs\": {\n                    \"city\": \"Bengaluru\",\n                    \"good\": true,\n                    \"type\": \"known\"\n                },\n                \"status\": \"enabled\",\n                \"lists\": [\n                    {\n                        \"subscription_status\": \"unconfirmed\",\n                        \"id\": 1,\n                        \"uuid\": \"ce13e971-c2ed-4069-bd0c-240e9a9f56f9\",\n                        \"name\": \"Default list\",\n                        \"type\": \"public\",\n                        \"tags\": [\n                            \"test\"\n                        ],\n                        \"created_at\": \"2020-02-10T23:07:16.194843+01:00\",\n                        \"updated_at\": \"2020-02-10T23:07:16.194843+01:00\"\n                    }\n                ]\n            },\n            {\n                \"id\": 2,\n                \"created_at\": \"2020-02-18T21:10:17.218979+01:00\",\n                \"updated_at\": \"2020-02-18T21:10:17.218979+01:00\",\n                \"uuid\": \"ccf66172-f87f-4509-b7af-e8716f739860\",\n                \"email\": \"quadri@example.com\",\n                \"name\": \"quadri\",\n                \"attribs\": {},\n                \"status\": \"enabled\",\n                \"lists\": [\n                    {\n                        \"subscription_status\": \"unconfirmed\",\n                        \"id\": 1,\n                        \"uuid\": \"ce13e971-c2ed-4069-bd0c-240e9a9f56f9\",\n                        \"name\": \"Default list\",\n                        \"type\": \"public\",\n                        \"tags\": [\n                            \"test\"\n                        ],\n                        \"created_at\": \"2020-02-10T23:07:16.194843+01:00\",\n                        \"updated_at\": \"2020-02-10T23:07:16.194843+01:00\"\n                    }\n                ]\n            },\n            {\n                \"id\": 3,\n                \"created_at\": \"2020-02-19T19:10:49.36636+01:00\",\n                \"updated_at\": \"2020-02-19T19:10:49.36636+01:00\",\n                \"uuid\": \"5d940585-3cc8-4add-b9c5-76efba3c6edd\",\n                \"email\": \"sugar@example.com\",\n                \"name\": \"sugar\",\n                \"attribs\": {},\n                \"status\": \"enabled\",\n                \"lists\": []\n            }\n        ],\n        \"query\": \"\",\n        \"total\": 3,\n        \"per_page\": 20,\n        \"page\": 1\n    }\n}\n</code></pre>"},{"location":"apis/subscribers/#get-apisubscriberssubscriber_id","title":"GET /api/subscribers/{subscriber_id}","text":"<p>Retrieve a specific subscriber.</p>"},{"location":"apis/subscribers/#parameters","title":"Parameters","text":"Name Type Required Description subscriber_id Number Yes Subscriber's ID."},{"location":"apis/subscribers/#example-request_1","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers/1' \n</code></pre>"},{"location":"apis/subscribers/#example-response_1","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"id\": 1,\n        \"created_at\": \"2020-02-10T23:07:16.199433+01:00\",\n        \"updated_at\": \"2020-02-10T23:07:16.199433+01:00\",\n        \"uuid\": \"ea06b2e7-4b08-4697-bcfc-2a5c6dde8f1c\",\n        \"email\": \"john@example.com\",\n        \"name\": \"John Doe\",\n        \"attribs\": {\n            \"city\": \"Bengaluru\",\n            \"good\": true,\n            \"type\": \"known\"\n        },\n        \"status\": \"enabled\",\n        \"lists\": [\n            {\n                \"subscription_status\": \"unconfirmed\",\n                \"id\": 1,\n                \"uuid\": \"ce13e971-c2ed-4069-bd0c-240e9a9f56f9\",\n                \"name\": \"Default list\",\n                \"type\": \"public\",\n                \"tags\": [\n                    \"test\"\n                ],\n                \"created_at\": \"2020-02-10T23:07:16.194843+01:00\",\n                \"updated_at\": \"2020-02-10T23:07:16.194843+01:00\"\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"apis/subscribers/#get-apisubscriberssubscriber_idexport","title":"GET /api/subscribers/{subscriber_id}/export","text":"<p>Export a specific subscriber data that gives profile, list subscriptions, campaign views and link clicks information. Names of private lists are replaced with \"Private list\". </p>"},{"location":"apis/subscribers/#parameters_1","title":"Parameters","text":"Name Type Required Description subscriber_id Number Yes Subscriber's ID."},{"location":"apis/subscribers/#example-request_2","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers/1/export' \n</code></pre>"},{"location":"apis/subscribers/#example-response_2","title":"Example Response","text":"<pre><code>{\n  \"profile\": [\n    {\n      \"id\": 1,\n      \"uuid\": \"c2cc0b31-b485-4d72-8ce8-b47081beadec\",\n      \"email\": \"john@example.com\",\n      \"name\": \"John Doe\",\n      \"attribs\": {\n        \"city\": \"Bengaluru\",\n        \"good\": true,\n        \"type\": \"known\"\n      },\n      \"status\": \"enabled\",\n      \"created_at\": \"2024-07-29T11:01:31.478677+05:30\",\n      \"updated_at\": \"2024-07-29T11:01:31.478677+05:30\"\n    }\n  ],\n  \"subscriptions\": [\n    {\n      \"subscription_status\": \"unconfirmed\",\n      \"name\": \"Private list\",\n      \"type\": \"private\",\n      \"created_at\": \"2024-07-29T11:01:31.478677+05:30\"\n    }\n  ],\n  \"campaign_views\": [],\n  \"link_clicks\": []\n}\n</code></pre>"},{"location":"apis/subscribers/#get-apisubscriberssubscriber_idbounces","title":"GET /api/subscribers/{subscriber_id}/bounces","text":"<p>Get a specific subscriber bounce records.</p>"},{"location":"apis/subscribers/#parameters_2","title":"Parameters","text":"Name Type Required Description subscriber_id Number Yes Subscriber's ID."},{"location":"apis/subscribers/#example-request_3","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers/1/bounces' \n</code></pre>"},{"location":"apis/subscribers/#example-response_3","title":"Example Response","text":"<pre><code>{\n  \"data\": [\n    {\n      \"id\": 841706,\n      \"type\": \"hard\",\n      \"source\": \"demo\",\n      \"meta\": {\n        \"some\": \"parameter\"\n      },\n      \"created_at\": \"2024-08-22T09:05:12.862877Z\",\n      \"email\": \"thomas.hobbes@example.com\",\n      \"subscriber_uuid\": \"137c0d83-8de6-44e2-a55f-d4238ab21969\",\n      \"subscriber_id\": 99,\n      \"campaign\": {\n        \"id\": 2,\n        \"name\": \"Welcome to listmonk\"\n      }\n    },\n    {\n      \"id\": 841680,\n      \"type\": \"hard\",\n      \"source\": \"demo\",\n      \"meta\": {\n        \"some\": \"parameter\"\n      },\n      \"created_at\": \"2024-08-19T14:07:53.141917Z\",\n      \"email\": \"thomas.hobbes@example.com\",\n      \"subscriber_uuid\": \"137c0d83-8de6-44e2-a55f-d4238ab21969\",\n      \"subscriber_id\": 99,\n      \"campaign\": {\n        \"id\": 1,\n        \"name\": \"Test campaign\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"apis/subscribers/#post-apisubscribers","title":"POST /api/subscribers","text":"<p>Create a new subscriber.</p>"},{"location":"apis/subscribers/#parameters_3","title":"Parameters","text":"Name Type Required Description email string Yes Subscriber's email address. name string Yes Subscriber's name. status string Yes Subscriber's status: <code>enabled</code>, <code>blocklisted</code>. lists number[] List of list IDs to subscribe to. attribs JSON Attributes of the new subscriber. preconfirm_subscriptions bool If true, subscriptions are marked as confirmed and no-optin emails are sent for double opt-in lists."},{"location":"apis/subscribers/#example-request_4","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers' -H 'Content-Type: application/json' \\\n    --data '{\"email\":\"subscriber@domain.com\",\"name\":\"The Subscriber\",\"status\":\"enabled\",\"lists\":[1],\"attribs\":{\"city\":\"Bengaluru\",\"projects\":3,\"stack\":{\"languages\":[\"go\",\"python\"]}}}'\n</code></pre>"},{"location":"apis/subscribers/#example-response_4","title":"Example Response","text":"<pre><code>{\n  \"data\": {\n    \"id\": 3,\n    \"created_at\": \"2019-07-03T12:17:29.735507+05:30\",\n    \"updated_at\": \"2019-07-03T12:17:29.735507+05:30\",\n    \"uuid\": \"eb420c55-4cfb-4972-92ba-c93c34ba475d\",\n    \"email\": \"subscriber@domain.com\",\n    \"name\": \"The Subscriber\",\n    \"attribs\": {\n      \"city\": \"Bengaluru\",\n      \"projects\": 3,\n      \"stack\": { \"languages\": [\"go\", \"python\"] }\n    },\n    \"status\": \"enabled\",\n    \"lists\": [1]\n  }\n}\n</code></pre>"},{"location":"apis/subscribers/#post-apisubscriberssubscribers_idoptin","title":"POST /api/subscribers/{subscribers_id}/optin","text":"<p>Sends optin confirmation email to subscribers.</p>"},{"location":"apis/subscribers/#example-request_5","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' 'http://localhost:9000/api/subscribers/11/optin' -H 'Content-Type: application/json' \\\n--data {}\n</code></pre>"},{"location":"apis/subscribers/#example-response_5","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n} \n</code></pre>"},{"location":"apis/subscribers/#post-apipublicsubscription","title":"POST /api/public/subscription","text":"<p>Create a public subscription, accepts both form encoded or JSON encoded body.</p>"},{"location":"apis/subscribers/#parameters_4","title":"Parameters","text":"Name Type Required Description email string Yes Subscriber's email address. name string Subscriber's name. list_uuids string[] Yes List of list UUIDs."},{"location":"apis/subscribers/#example-json-request","title":"Example JSON Request","text":"<pre><code>curl 'http://localhost:9000/api/public/subscription' -H 'Content-Type: application/json' \\\n    --data '{\"email\":\"subscriber@domain.com\",\"name\":\"The Subscriber\",\"list_uuids\": [\"eb420c55-4cfb-4972-92ba-c93c34ba475d\", \"0c554cfb-eb42-4972-92ba-c93c34ba475d\"]}'\n</code></pre>"},{"location":"apis/subscribers/#example-form-request","title":"Example Form Request","text":"<pre><code>curl -u 'http://localhost:9000/api/public/subscription' \\\n    -d 'email=subscriber@domain.com' -d 'name=The Subscriber' -d 'l=eb420c55-4cfb-4972-92ba-c93c34ba475d' -d 'l=0c554cfb-eb42-4972-92ba-c93c34ba475d'\n</code></pre> <p>Note: For form request, use <code>l</code> for multiple lists instead of <code>lists</code>.</p>"},{"location":"apis/subscribers/#example-response_6","title":"Example Response","text":"<pre><code>{\n  \"data\": true\n}\n</code></pre>"},{"location":"apis/subscribers/#put-apisubscriberslists","title":"PUT /api/subscribers/lists","text":"<p>Modify subscriber list memberships.</p>"},{"location":"apis/subscribers/#parameters_5","title":"Parameters","text":"Name Type Required Description ids number[] Yes Array of user IDs to be modified. action string Yes Action to be applied: <code>add</code>, <code>remove</code>, or <code>unsubscribe</code>. target_list_ids number[] Yes Array of list IDs to be modified. status string Required for <code>add</code> Subscriber status: <code>confirmed</code>, <code>unconfirmed</code>, or <code>unsubscribed</code>."},{"location":"apis/subscribers/#example-request_6","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' -X PUT 'http://localhost:9000/api/subscribers/lists' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"ids\": [1, 2, 3], \"action\": \"add\", \"target_list_ids\": [4, 5, 6], \"status\": \"confirmed\"}'\n</code></pre>"},{"location":"apis/subscribers/#example-response_7","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n} \n</code></pre>"},{"location":"apis/subscribers/#put-apisubscriberssubscriber_id","title":"PUT /api/subscribers/{subscriber_id}","text":"<p>Update a specific subscriber.</p> <p>Refer to parameters from POST /api/subscribers. Note: All parameters must be set, if not, the subscriber will be removed from all previously assigned lists.</p>"},{"location":"apis/subscribers/#put-apisubscriberssubscriber_idblocklist","title":"PUT /api/subscribers/{subscriber_id}/blocklist","text":"<p>Blocklist a specific subscriber.</p>"},{"location":"apis/subscribers/#parameters_6","title":"Parameters","text":"Name Type Required Description subscriber_id Number Yes Subscriber's ID."},{"location":"apis/subscribers/#example-request_7","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' -X PUT 'http://localhost:9000/api/subscribers/9/blocklist'\n</code></pre>"},{"location":"apis/subscribers/#example-response_8","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n} \n</code></pre>"},{"location":"apis/subscribers/#put-apisubscribersblocklist","title":"PUT /api/subscribers/blocklist","text":"<p>Blocklist multiple subscriber.</p>"},{"location":"apis/subscribers/#parameters_7","title":"Parameters","text":"Name Type Required Description ids Number Yes Subscriber's ID."},{"location":"apis/subscribers/#example-request_8","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' -X PUT 'http://localhost:8080/api/subscribers/blocklist' -H 'Content-Type: application/json' --data-raw '{\"ids\":[2,1]}'\n</code></pre>"},{"location":"apis/subscribers/#example-response_9","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n} \n</code></pre>"},{"location":"apis/subscribers/#put-apisubscribersqueryblocklist","title":"PUT /api/subscribers/query/blocklist","text":"<p>Blocklist subscribers based on SQL expression.</p> <p>Refer to the querying and segmentation section for more information on how to query subscribers with SQL expressions.</p>"},{"location":"apis/subscribers/#parameters_8","title":"Parameters","text":"Name Type Required Description query string Yes SQL expression to filter subscribers with. list_ids []number No Optional list IDs to limit the filtering to."},{"location":"apis/subscribers/#example-request_9","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' -X POST 'http://localhost:9000/api/subscribers/query/blocklist' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"query\":\"subscribers.name LIKE \\'John Doe\\' AND subscribers.attribs-&gt;&gt;'\\''city'\\'' = '\\''Bengaluru'\\''\"}'\n</code></pre>"},{"location":"apis/subscribers/#example-response_10","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/subscribers/#delete-apisubscriberssubscriber_id","title":"DELETE /api/subscribers/{subscriber_id}","text":"<p>Delete a specific subscriber.</p>"},{"location":"apis/subscribers/#parameters_9","title":"Parameters","text":"Name Type Required Description subscriber_id Number Yes Subscriber's ID."},{"location":"apis/subscribers/#example-request_10","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/subscribers/9'\n</code></pre>"},{"location":"apis/subscribers/#example-response_11","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/subscribers/#delete-apisubscriberssubscriber_idbounces","title":"DELETE /api/subscribers/{subscriber_id}/bounces","text":"<p>Delete a subscriber's bounce records</p>"},{"location":"apis/subscribers/#parameters_10","title":"Parameters","text":"Name Type Required Description id subscriber_id Yes Subscriber's ID."},{"location":"apis/subscribers/#example-request_11","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/subscribers/9/bounces'\n</code></pre>"},{"location":"apis/subscribers/#example-response_12","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/subscribers/#delete-apisubscribers","title":"DELETE /api/subscribers","text":"<p>Delete one or more subscribers.</p>"},{"location":"apis/subscribers/#parameters_11","title":"Parameters","text":"Name Type Required Description id number[] Yes Array of subscriber's IDs."},{"location":"apis/subscribers/#example-request_12","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' -X DELETE 'http://localhost:9000/api/subscribers?id=10&amp;id=11'\n</code></pre>"},{"location":"apis/subscribers/#example-response_13","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/subscribers/#post-apisubscribersquerydelete","title":"POST /api/subscribers/query/delete","text":"<p>Delete subscribers based on SQL expression.</p>"},{"location":"apis/subscribers/#parameters_12","title":"Parameters","text":"Name Type Required Description query string No SQL expression to filter subscribers with. list_ids []number No Optional list IDs to limit the filtering to. all bool No When set to <code>true</code>, ignores any query and deletes all subscribers."},{"location":"apis/subscribers/#example-request_13","title":"Example Request","text":"<pre><code>curl -u 'api_username:access_token' -X POST 'http://localhost:9000/api/subscribers/query/delete' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"query\":\"subscribers.name LIKE \\'John Doe\\' AND subscribers.attribs-&gt;&gt;'\\''city'\\'' = '\\''Bengaluru'\\''\"}'\n</code></pre>"},{"location":"apis/subscribers/#example-response_14","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/templates/","title":"API / Templates","text":"Method Endpoint Description GET /api/templates Retrieve all templates GET /api/templates/{template_id} Retrieve a template GET /api/templates/{template_id}/preview Retrieve template HTML preview POST /api/templates Create a template POST /api/templates/preview Render and preview a template PUT /api/templates/{template_id} Update a template PUT /api/templates/{template_id}/default Set default template DELETE /api/templates/{template_id} Delete a template"},{"location":"apis/templates/#get-apitemplates","title":"GET /api/templates","text":"<p>Retrieve all templates.</p>"},{"location":"apis/templates/#example-request","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/templates'\n</code></pre>"},{"location":"apis/templates/#example-response","title":"Example Response","text":"<pre><code>{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"created_at\": \"2020-03-14T17:36:41.288578+01:00\",\n            \"updated_at\": \"2020-03-14T17:36:41.288578+01:00\",\n            \"name\": \"Default template\",\n            \"body\": \"{{ template \\\"content\\\" . }}\",\n            \"body_source\": null,\n            \"type\": \"campaign\",\n            \"is_default\": true\n        }\n    ]\n}\n</code></pre>"},{"location":"apis/templates/#get-apitemplatestemplate_id","title":"GET /api/templates/{template_id}","text":"<p>Retrieve a specific template.</p>"},{"location":"apis/templates/#parameters","title":"Parameters","text":"Name Type Required Description template_id number Yes ID of the template to retrieve"},{"location":"apis/templates/#example-request_1","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/templates/1'\n</code></pre>"},{"location":"apis/templates/#example-response_1","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"id\": 1,\n        \"created_at\": \"2020-03-14T17:36:41.288578+01:00\",\n        \"updated_at\": \"2020-03-14T17:36:41.288578+01:00\",\n        \"name\": \"Default template\",\n        \"body\": \"{{ template \\\"content\\\" . }}\",\n        \"body_source\": null,\n        \"type\": \"campaign\",\n        \"is_default\": true\n    }\n}\n</code></pre>"},{"location":"apis/templates/#get-apitemplatestemplate_idpreview","title":"GET /api/templates/{template_id}/preview","text":"<p>Retrieve the HTML preview of a template.</p>"},{"location":"apis/templates/#parameters_1","title":"Parameters","text":"Name Type Required Description template_id number Yes ID of the template to preview"},{"location":"apis/templates/#example-request_2","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X GET 'http://localhost:9000/api/templates/1/preview'\n</code></pre>"},{"location":"apis/templates/#example-response_2","title":"Example Response","text":"<pre><code>&lt;p&gt;Hi there&lt;/p&gt;\n&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis et elit ac elit sollicitudin condimentum non a magna.\n    Sed tempor mauris in facilisis vehicula. Aenean nisl urna, accumsan ac tincidunt vitae, interdum cursus massa.\n    Interdum et malesuada fames ac ante ipsum primis in faucibus. Aliquam varius turpis et turpis lacinia placerat.\n    Aenean id ligula a orci lacinia blandit at eu felis. Phasellus vel lobortis lacus. Suspendisse leo elit, luctus sed\n    erat ut, venenatis fermentum ipsum. Donec bibendum neque quis.&lt;/p&gt;\n\n&lt;h3&gt;Sub heading&lt;/h3&gt;\n&lt;p&gt;Nam luctus dui non placerat mattis. Morbi non accumsan orci, vel interdum urna. Duis faucibus id nunc ut euismod.\n    Curabitur et eros id erat feugiat fringilla in eget neque. Aliquam accumsan cursus eros sed faucibus.&lt;/p&gt;\n\n&lt;p&gt;Here is a link to &lt;a href=\"https://listmonk.app\" target=\"_blank\"&gt;listmonk&lt;/a&gt;.&lt;/p&gt;\n</code></pre>"},{"location":"apis/templates/#post-apitemplates","title":"POST /api/templates","text":"<p>Create a template.</p>"},{"location":"apis/templates/#parameters_2","title":"Parameters","text":"Name Type Required Description name string Yes Name of the template type string Yes Type of the template (<code>campaign</code>, <code>campaign_visual</code>, or <code>tx</code>) subject string Subject line for the template (only for <code>tx</code>) body_source string If type is <code>campaign_visual</code>, the JSON source for the email-builder tempalate body string Yes HTML body of the template"},{"location":"apis/templates/#example-request_3","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X POST 'http://localhost:9000/api/templates' \\\n-H 'Content-Type: application/json' \\\n-d '{\n    \"name\": \"New template\",\n    \"type\": \"campaign\",\n    \"subject\": \"Your Weekly Newsletter\",\n    \"body\": \"&lt;h1&gt;Header&lt;/h1&gt;&lt;p&gt;Content goes here&lt;/p&gt;\"\n}'\n</code></pre>"},{"location":"apis/templates/#example-response_3","title":"Example Response","text":"<pre><code>{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"created_at\": \"2020-03-14T17:36:41.288578+01:00\",\n            \"updated_at\": \"2020-03-14T17:36:41.288578+01:00\",\n            \"name\": \"Default template\",\n            \"body\": \"{{ template \\\"content\\\" . }}\",\n            \"body_source\": null,\n            \"type\": \"campaign\",\n            \"is_default\": true\n        }\n    ]\n}\n</code></pre>"},{"location":"apis/templates/#put-apitemplatestemplate_id","title":"PUT /api/templates/{template_id}","text":"<p>Update a template.</p> <p>Refer to parameters from POST /api/templates</p>"},{"location":"apis/templates/#put-apitemplatestemplate_iddefault","title":"PUT /api/templates/{template_id}/default","text":"<p>Set a template as the default.</p>"},{"location":"apis/templates/#parameters_3","title":"Parameters","text":"Name Type Required Description template_id number Yes ID of the template to set as default"},{"location":"apis/templates/#example-request_4","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X PUT 'http://localhost:9000/api/templates/1/default'\n</code></pre>"},{"location":"apis/templates/#example-response_4","title":"Example Response","text":"<pre><code>{\n    \"data\": {\n        \"id\": 1,\n        \"created_at\": \"2020-03-14T17:36:41.288578+01:00\",\n        \"updated_at\": \"2020-03-14T17:36:41.288578+01:00\",\n        \"name\": \"Default template\",\n        \"body\": \"{{ template \\\"content\\\" . }}\",\n        \"body_source\": null,\n        \"type\": \"campaign\",\n        \"is_default\": true\n    }\n}\n</code></pre>"},{"location":"apis/templates/#delete-apitemplatestemplate_id","title":"DELETE /api/templates/{template_id}","text":"<p>Delete a template.</p>"},{"location":"apis/templates/#parameters_4","title":"Parameters","text":"Name Type Required Description template_id number Yes ID of the template to delete"},{"location":"apis/templates/#example-request_5","title":"Example Request","text":"<pre><code>curl -u \"api_user:token\" -X DELETE 'http://localhost:9000/api/templates/35'\n</code></pre>"},{"location":"apis/templates/#example-response_5","title":"Example Response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/transactional/","title":"API / Transactional","text":"Method Endpoint Description POST /api/tx Send transactional messages"},{"location":"apis/transactional/#post-apitx","title":"POST /api/tx","text":"<p>Allows sending transactional messages to one or more subscribers via a preconfigured transactional template.</p>"},{"location":"apis/transactional/#parameters","title":"Parameters","text":"Name Type Required Description subscriber_email string Email of the subscriber. Can substitute with <code>subscriber_id</code>. subscriber_id number Subscriber's ID can substitute with <code>subscriber_email</code>. subscriber_emails string[] Multiple subscriber emails as alternative to <code>subscriber_email</code>. subscriber_ids number[] Multiple subscriber IDs as an alternative to <code>subscriber_id</code>. template_id number Yes ID of the transactional template to be used for the message. from_email string Optional sender email. subject string Optional subject. If empty, the subject defined on the template is used data JSON Optional nested JSON map. Available in the template as <code>{{ .Tx.Data.* }}</code>. headers JSON[] Optional array of email headers. messenger string Messenger to send the message. Default is <code>email</code>. content_type string Email format options include <code>html</code>, <code>markdown</code>, and <code>plain</code>."},{"location":"apis/transactional/#example","title":"Example","text":"<pre><code>curl -u \"api_user:token\" \"http://localhost:9000/api/tx\" -X POST \\\n     -H 'Content-Type: application/json; charset=utf-8' \\\n     --data-binary @- &lt;&lt; EOF\n    {\n        \"subscriber_email\": \"user@test.com\",\n        \"template_id\": 2,\n        \"data\": {\"order_id\": \"1234\", \"date\": \"2022-07-30\", \"items\": [1, 2, 3]},\n        \"content_type\": \"html\"\n    }\nEOF\n</code></pre>"},{"location":"apis/transactional/#example-response","title":"Example response","text":"<pre><code>{\n    \"data\": true\n}\n</code></pre>"},{"location":"apis/transactional/#file-attachments","title":"File Attachments","text":"<p>To include file attachments in a transactional message, use the <code>multipart/form-data</code> Content-Type. Use <code>data</code> param for the parameters described above as a JSON object. Include any number of attachments via the <code>file</code> param.</p> <pre><code>curl -u \"api_user:token\" \"http://localhost:9000/api/tx\" -X POST \\\n-F 'data=\\\"{\n    \\\"subscriber_email\\\": \\\"user@test.com\\\",\n    \\\"template_id\\\": 4\n}\"' \\\n-F 'file=@\"/path/to/attachment.pdf\"' \\\n-F 'file=@\"/path/to/attachment2.pdf\"'\n</code></pre>"},{"location":"maintenance/performance/","title":"Performance","text":"<p>listmonk is built to be highly performant and can handle millions of subscribers with minimal system resources.</p> <p>However, as the Postgres database grows\u2014with a large number of subscribers, campaign views, and click records\u2014it can significantly slow down certain aspects of the program, particularly in counting records and aggregating various statistics. For instance, loading admin pages that do these aggregations can take tens of seconds if the database has millions of subscribers.</p> <ul> <li>Aggregate counts, statistics, and charts on the landing dashboard.</li> <li>Subscriber count beside every list on the Lists page.</li> <li>Total subscriber count on the Subscribers page.</li> </ul> <p>However, at that scale, viewing the exact number of subscribers or statistics every time the admin panel is accessed becomes mostly unnecessary. On installations with millions of subscribers, where the above pages do not load instantly, it is highly recommended to turn on the <code>Settings -&gt; Performance -&gt; Cache slow database queries</code> option.</p>"},{"location":"maintenance/performance/#slow-query-caching","title":"Slow query caching","text":"<p>When this option is enabled, the subscriber counts on the Lists page, the Subscribers page, and the statistics on the dashboard, etc., are no longer counted in real-time in the database. Instead, they are updated periodically and cached, resulting in a massive performance boost. The periodicity can be configured on the Settings -&gt; Performance page using a standard crontab expression (default: <code>0 3 * * *</code>, which means 3 AM daily). Use a tool like crontab.guru for easily generating a desired crontab expression.</p>"},{"location":"maintenance/performance/#vacuum-ing","title":"VACUUM-ing","text":"<p>Running <code>VACUUM ANALYZE</code> on large Postgres databases at regular intervals (for instance, once a week), is recommended. It reclaims disk space and improves Postgres' query performance. Do note that this is a blocking operation and all database queries can come to a stand-still on a large database while the operation is running (generally only a few seconds).</p>"}]}